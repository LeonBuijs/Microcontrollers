
OpdrachtB7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000084e  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000795  00000000  00000000  00000a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a1  00000000  00000000  000011ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000014a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000404  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008d  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001955  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	4e c0       	rjmp	.+156    	; 0x138 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
typedef enum { startstate, state1, state2, state3, endstate } ownBool;

int main(void)
{
	ownBool state = startstate;
	DDRD = 0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	81 bb       	out	0x11, r24	; 17
	
	PORTA = 0x00;
  a2:	1b ba       	out	0x1b, r1	; 27

typedef enum { startstate, state1, state2, state3, endstate } ownBool;

int main(void)
{
	ownBool state = startstate;
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	15 c0       	rjmp	.+42     	; 0xd2 <main+0x34>
    while (1) 
    {
		switch(state){
			case startstate:
				if (PINA & 0b00000110){ // 6
					state = state1;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	13 c0       	rjmp	.+38     	; 0xd2 <main+0x34>
				} else if (PINA & 0b00000101) // 5
				{
					state = state2;
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	11 c0       	rjmp	.+34     	; 0xd2 <main+0x34>
				}
				break;
			case state1:
				if (PINA & 0b00000101){ // 5
					state = state2;
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	0f c0       	rjmp	.+30     	; 0xd2 <main+0x34>
				} else if (PINA & 0b00000111) // 7
				{
					state = startstate;
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0d c0       	rjmp	.+26     	; 0xd2 <main+0x34>
				}
				break;
			case state2:
				if (PINA & 0b00000101){ // 5
					state = state3;
  b8:	83 e0       	ldi	r24, 0x03	; 3
  ba:	0b c0       	rjmp	.+22     	; 0xd2 <main+0x34>
				} else if (PINA & 0b00000110) // 6
				{
					state = state1;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	09 c0       	rjmp	.+18     	; 0xd2 <main+0x34>
				} else if (PINA & 0b00000111) // 7
				{
					state = startstate;
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	07 c0       	rjmp	.+14     	; 0xd2 <main+0x34>
				}
				break;
			case state3:
				if (PINA & 0b00000101){ // 5
					state = endstate;
  c4:	84 e0       	ldi	r24, 0x04	; 4
  c6:	05 c0       	rjmp	.+10     	; 0xd2 <main+0x34>
				} else if (PINA & 0b00000110) // 6
				{
					state = endstate;
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <main+0x34>
				} else if (PINA & 0b00000111) // 7
				{
					state = startstate;
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <main+0x34>
				}
				break;
			case endstate:
				if (PINA & 0b00000111) // 7
				{
					state = startstate;
  d0:	80 e0       	ldi	r24, 0x00	; 0
	PORTA = 0x00;
	
    /* Replace with your application code */
    while (1) 
    {
		switch(state){
  d2:	82 30       	cpi	r24, 0x02	; 2
  d4:	c9 f0       	breq	.+50     	; 0x108 <main+0x6a>
  d6:	28 f4       	brcc	.+10     	; 0xe2 <main+0x44>
  d8:	88 23       	and	r24, r24
  da:	41 f0       	breq	.+16     	; 0xec <main+0x4e>
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	69 f0       	breq	.+26     	; 0xfa <main+0x5c>
  e0:	f8 cf       	rjmp	.-16     	; 0xd2 <main+0x34>
  e2:	83 30       	cpi	r24, 0x03	; 3
  e4:	d9 f0       	breq	.+54     	; 0x11c <main+0x7e>
  e6:	84 30       	cpi	r24, 0x04	; 4
  e8:	19 f1       	breq	.+70     	; 0x130 <main+0x92>
  ea:	f3 cf       	rjmp	.-26     	; 0xd2 <main+0x34>
			case startstate:
				if (PINA & 0b00000110){ // 6
  ec:	99 b3       	in	r25, 0x19	; 25
  ee:	96 70       	andi	r25, 0x06	; 6
  f0:	d9 f6       	brne	.-74     	; 0xa8 <main+0xa>
					state = state1;
				} else if (PINA & 0b00000101) // 5
  f2:	99 b3       	in	r25, 0x19	; 25
  f4:	95 70       	andi	r25, 0x05	; 5
  f6:	d1 f6       	brne	.-76     	; 0xac <main+0xe>
  f8:	ec cf       	rjmp	.-40     	; 0xd2 <main+0x34>
				{
					state = state2;
				}
				break;
			case state1:
				if (PINA & 0b00000101){ // 5
  fa:	99 b3       	in	r25, 0x19	; 25
  fc:	95 70       	andi	r25, 0x05	; 5
  fe:	c1 f6       	brne	.-80     	; 0xb0 <main+0x12>
					state = state2;
				} else if (PINA & 0b00000111) // 7
 100:	99 b3       	in	r25, 0x19	; 25
 102:	97 70       	andi	r25, 0x07	; 7
 104:	b9 f6       	brne	.-82     	; 0xb4 <main+0x16>
 106:	e5 cf       	rjmp	.-54     	; 0xd2 <main+0x34>
				{
					state = startstate;
				}
				break;
			case state2:
				if (PINA & 0b00000101){ // 5
 108:	99 b3       	in	r25, 0x19	; 25
 10a:	95 70       	andi	r25, 0x05	; 5
 10c:	a9 f6       	brne	.-86     	; 0xb8 <main+0x1a>
					state = state3;
				} else if (PINA & 0b00000110) // 6
 10e:	99 b3       	in	r25, 0x19	; 25
 110:	96 70       	andi	r25, 0x06	; 6
 112:	a1 f6       	brne	.-88     	; 0xbc <main+0x1e>
				{
					state = state1;
				} else if (PINA & 0b00000111) // 7
 114:	99 b3       	in	r25, 0x19	; 25
 116:	97 70       	andi	r25, 0x07	; 7
 118:	99 f6       	brne	.-90     	; 0xc0 <main+0x22>
 11a:	db cf       	rjmp	.-74     	; 0xd2 <main+0x34>
				{
					state = startstate;
				}
				break;
			case state3:
				if (PINA & 0b00000101){ // 5
 11c:	99 b3       	in	r25, 0x19	; 25
 11e:	95 70       	andi	r25, 0x05	; 5
 120:	89 f6       	brne	.-94     	; 0xc4 <main+0x26>
					state = endstate;
				} else if (PINA & 0b00000110) // 6
 122:	99 b3       	in	r25, 0x19	; 25
 124:	96 70       	andi	r25, 0x06	; 6
 126:	81 f6       	brne	.-96     	; 0xc8 <main+0x2a>
				{
					state = endstate;
				} else if (PINA & 0b00000111) // 7
 128:	99 b3       	in	r25, 0x19	; 25
 12a:	97 70       	andi	r25, 0x07	; 7
 12c:	79 f6       	brne	.-98     	; 0xcc <main+0x2e>
 12e:	d1 cf       	rjmp	.-94     	; 0xd2 <main+0x34>
				{
					state = startstate;
				}
				break;
			case endstate:
				if (PINA & 0b00000111) // 7
 130:	99 b3       	in	r25, 0x19	; 25
 132:	97 70       	andi	r25, 0x07	; 7
 134:	69 f6       	brne	.-102    	; 0xd0 <main+0x32>
 136:	cd cf       	rjmp	.-102    	; 0xd2 <main+0x34>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
