
OpdrachtB7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000224  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000926  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000850  00000000  00000000  00000bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000389  00000000  00000000  0000142e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000017b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000459  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006a  00000000  00000000  00001c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001caf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	11 d0       	rcall	.+34     	; 0xcc <main>
  aa:	80 c0       	rjmp	.+256    	; 0x1ac <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <wait>:

enum state { startstate, state1, state2, state3, endstate };

void wait(int ms)
{
	for (int i = 0; i < ms; i++)
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	08 c0       	rjmp	.+16     	; 0xc4 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	ef ec       	ldi	r30, 0xCF	; 207
  b6:	f7 e0       	ldi	r31, 0x07	; 7
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <wait+0xa>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <wait+0x10>
  be:	00 00       	nop
  c0:	2f 5f       	subi	r18, 0xFF	; 255
  c2:	3f 4f       	sbci	r19, 0xFF	; 255
  c4:	28 17       	cp	r18, r24
  c6:	39 07       	cpc	r19, r25
  c8:	ac f3       	brlt	.-22     	; 0xb4 <wait+0x6>
	{
		_delay_ms(1);
	}
}
  ca:	08 95       	ret

000000cc <main>:
enum state currentState = startstate;

int main(void)
{
    
	DDRA = 0x00;
  cc:	1a ba       	out	0x1a, r1	; 26
    DDRD = 0xFF;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	81 bb       	out	0x11, r24	; 17

    PORTA = 0x00;
  d2:	1b ba       	out	0x1b, r1	; 27
	

    /* Replace with your application code */
    while (1) 
    {
        switch(currentState){
  d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d8:	82 30       	cpi	r24, 0x02	; 2
  da:	11 f1       	breq	.+68     	; 0x120 <main+0x54>
  dc:	28 f4       	brcc	.+10     	; 0xe8 <main+0x1c>
  de:	88 23       	and	r24, r24
  e0:	41 f0       	breq	.+16     	; 0xf2 <main+0x26>
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	91 f0       	breq	.+36     	; 0x10a <main+0x3e>
  e6:	41 c0       	rjmp	.+130    	; 0x16a <main+0x9e>
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	59 f1       	breq	.+86     	; 0x142 <main+0x76>
  ec:	84 30       	cpi	r24, 0x04	; 4
  ee:	d1 f1       	breq	.+116    	; 0x164 <main+0x98>
  f0:	3c c0       	rjmp	.+120    	; 0x16a <main+0x9e>
            case startstate:
                if (PINA & 0b01000000){ // 6
  f2:	ce 9b       	sbis	0x19, 6	; 25
  f4:	04 c0       	rjmp	.+8      	; 0xfe <main+0x32>
                    currentState = state1;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  fc:	36 c0       	rjmp	.+108    	; 0x16a <main+0x9e>
                } else if (PINA & 0b00100000) // 5
  fe:	cd 9b       	sbis	0x19, 5	; 25
 100:	34 c0       	rjmp	.+104    	; 0x16a <main+0x9e>
                {
                    currentState = state2;
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	30 c0       	rjmp	.+96     	; 0x16a <main+0x9e>
                }
                break;
            case state1:
                if (PINA & 0b00100000){ // 5
 10a:	cd 9b       	sbis	0x19, 5	; 25
 10c:	04 c0       	rjmp	.+8      	; 0x116 <main+0x4a>
                    currentState = state2;
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 114:	2a c0       	rjmp	.+84     	; 0x16a <main+0x9e>
                } else if (PINA & 0b10000000) // 7
 116:	cf 9b       	sbis	0x19, 7	; 25
 118:	28 c0       	rjmp	.+80     	; 0x16a <main+0x9e>
                {
                    currentState = startstate;
 11a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 11e:	25 c0       	rjmp	.+74     	; 0x16a <main+0x9e>
                }
                break;
            case state2:
                if (PINA & 0b00100000){ // 5
 120:	cd 9b       	sbis	0x19, 5	; 25
 122:	04 c0       	rjmp	.+8      	; 0x12c <main+0x60>
                    currentState = state3;
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 12a:	1f c0       	rjmp	.+62     	; 0x16a <main+0x9e>
                } else if (PINA & 0b01000000) // 6
 12c:	ce 9b       	sbis	0x19, 6	; 25
 12e:	04 c0       	rjmp	.+8      	; 0x138 <main+0x6c>
                {
                    currentState = state1;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 136:	19 c0       	rjmp	.+50     	; 0x16a <main+0x9e>
                } else if (PINA & 0b10000000) // 7
 138:	cf 9b       	sbis	0x19, 7	; 25
 13a:	17 c0       	rjmp	.+46     	; 0x16a <main+0x9e>
                {
                    currentState = startstate;
 13c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 140:	14 c0       	rjmp	.+40     	; 0x16a <main+0x9e>
                }
                break;
            case state3:
                if (PINA & 0b00100000){ // 5
 142:	cd 9b       	sbis	0x19, 5	; 25
 144:	04 c0       	rjmp	.+8      	; 0x14e <main+0x82>
                    currentState = endstate;
 146:	84 e0       	ldi	r24, 0x04	; 4
 148:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	0e c0       	rjmp	.+28     	; 0x16a <main+0x9e>
                } else if (PINA & 0b01000000) // 6
 14e:	ce 9b       	sbis	0x19, 6	; 25
 150:	04 c0       	rjmp	.+8      	; 0x15a <main+0x8e>
                {
                    currentState = endstate;
 152:	84 e0       	ldi	r24, 0x04	; 4
 154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 158:	08 c0       	rjmp	.+16     	; 0x16a <main+0x9e>
                } else if (PINA & 0b10000000) // 7
 15a:	cf 9b       	sbis	0x19, 7	; 25
 15c:	06 c0       	rjmp	.+12     	; 0x16a <main+0x9e>
                {
                    currentState = startstate;
 15e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 162:	03 c0       	rjmp	.+6      	; 0x16a <main+0x9e>
                }
                break;
            case endstate:
                if (PINA & 0b10000000) // 7
 164:	cf 99       	sbic	0x19, 7	; 25
                {
                    currentState = startstate;
 166:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                break;

            //PORTD = 0b10000000 >> state;
        }
		
		switch (currentState)
 16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16e:	82 30       	cpi	r24, 0x02	; 2
 170:	89 f0       	breq	.+34     	; 0x194 <main+0xc8>
 172:	28 f4       	brcc	.+10     	; 0x17e <main+0xb2>
 174:	88 23       	and	r24, r24
 176:	41 f0       	breq	.+16     	; 0x188 <main+0xbc>
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	49 f0       	breq	.+18     	; 0x18e <main+0xc2>
 17c:	13 c0       	rjmp	.+38     	; 0x1a4 <main+0xd8>
 17e:	83 30       	cpi	r24, 0x03	; 3
 180:	61 f0       	breq	.+24     	; 0x19a <main+0xce>
 182:	84 30       	cpi	r24, 0x04	; 4
 184:	69 f0       	breq	.+26     	; 0x1a0 <main+0xd4>
 186:	0e c0       	rjmp	.+28     	; 0x1a4 <main+0xd8>
		{
			case startstate:
			PORTD = 0b10000000;
 188:	80 e8       	ldi	r24, 0x80	; 128
 18a:	82 bb       	out	0x12, r24	; 18
			break;
 18c:	0b c0       	rjmp	.+22     	; 0x1a4 <main+0xd8>
			case state1:
			PORTD = 0b01000000;
 18e:	80 e4       	ldi	r24, 0x40	; 64
 190:	82 bb       	out	0x12, r24	; 18
			break;
 192:	08 c0       	rjmp	.+16     	; 0x1a4 <main+0xd8>
			case state2:
			PORTD = 0b00100000;
 194:	80 e2       	ldi	r24, 0x20	; 32
 196:	82 bb       	out	0x12, r24	; 18
			break;
 198:	05 c0       	rjmp	.+10     	; 0x1a4 <main+0xd8>
			case state3:
			PORTD = 0b00010000;
 19a:	80 e1       	ldi	r24, 0x10	; 16
 19c:	82 bb       	out	0x12, r24	; 18
			break;
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <main+0xd8>
			case endstate:
			PORTD = 0b00001000;
 1a0:	88 e0       	ldi	r24, 0x08	; 8
 1a2:	82 bb       	out	0x12, r24	; 18
			break;
		}
		
		wait(100);
 1a4:	84 e6       	ldi	r24, 0x64	; 100
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	82 df       	rcall	.-252    	; 0xae <wait>
    }
 1aa:	94 cf       	rjmp	.-216    	; 0xd4 <main+0x8>

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
