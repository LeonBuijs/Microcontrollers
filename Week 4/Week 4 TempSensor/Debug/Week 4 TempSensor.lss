
Week 4 TempSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000007ea  0000085e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  0000087e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ce1  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a3a  00000000  00000000  00001681  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f2  00000000  00000000  000020bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000118  00000000  00000000  000026b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ec  00000000  00000000  000027c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002eb  00000000  00000000  00002cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002f9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ee       	ldi	r30, 0xEA	; 234
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	ab d0       	rcall	.+342    	; 0x20a <main>
  b4:	98 c3       	rjmp	.+1840   	; 0x7e6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_strobe_lcd_e>:
outputs:
notes:			According datasheet HD44780
Version :    	DMK, Initial code
*******************************************************************/
void lcd_strobe_lcd_e(void) {
	PORTC |= (1<<LCD_E);	// E high
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	8f ec       	ldi	r24, 0xCF	; 207
  c0:	97 e0       	ldi	r25, 0x07	; 7
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_strobe_lcd_e+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_strobe_lcd_e+0x10>
  c8:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTC &= ~(1<<LCD_E);  	// E low
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	87 7f       	andi	r24, 0xF7	; 247
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	8f ec       	ldi	r24, 0xCF	; 207
  d2:	97 e0       	ldi	r25, 0x07	; 7
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_strobe_lcd_e+0x1c>
  d8:	00 c0       	rjmp	.+0      	; 0xda <lcd_strobe_lcd_e+0x22>
  da:	00 00       	nop
  dc:	08 95       	ret

000000de <init_4bits_mode>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void init_4bits_mode(void) {
  de:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  e4:	15 ba       	out	0x15, r1	; 21

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
  e6:	c0 e2       	ldi	r28, 0x20	; 32
  e8:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
  ea:	e6 df       	rcall	.-52     	; 0xb8 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
	lcd_strobe_lcd_e();
  ec:	c5 bb       	out	0x15, r28	; 21
  ee:	e4 df       	rcall	.-56     	; 0xb8 <lcd_strobe_lcd_e>
	PORTC = 0x80;
  f0:	80 e8       	ldi	r24, 0x80	; 128
	lcd_strobe_lcd_e();
  f2:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
  f4:	e1 df       	rcall	.-62     	; 0xb8 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
  f6:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
  f8:	df df       	rcall	.-66     	; 0xb8 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
  fa:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
  fc:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
  fe:	dc df       	rcall	.-72     	; 0xb8 <lcd_strobe_lcd_e>
 100:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x60;
 102:	da df       	rcall	.-76     	; 0xb8 <lcd_strobe_lcd_e>
 104:	80 e6       	ldi	r24, 0x60	; 96
	lcd_strobe_lcd_e();
 106:	85 bb       	out	0x15, r24	; 21
 108:	d7 df       	rcall	.-82     	; 0xb8 <lcd_strobe_lcd_e>

}
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <lcd_write_data>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_data(unsigned char byte) {
 10e:	cf 93       	push	r28
 110:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 112:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 114:	85 b3       	in	r24, 0x15	; 21
 116:	84 60       	ori	r24, 0x04	; 4
 118:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 11a:	ce df       	rcall	.-100    	; 0xb8 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 11c:	c2 95       	swap	r28
 11e:	c0 7f       	andi	r28, 0xF0	; 240
 120:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
 122:	85 b3       	in	r24, 0x15	; 21
 124:	84 60       	ori	r24, 0x04	; 4
	lcd_strobe_lcd_e();
 126:	85 bb       	out	0x15, r24	; 21
 128:	c7 df       	rcall	.-114    	; 0xb8 <lcd_strobe_lcd_e>
}
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <lcd_write_string>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_string(char *str) {
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 134:	02 c0       	rjmp	.+4      	; 0x13a <lcd_write_string+0xc>
		lcd_write_data(*str);
 136:	eb df       	rcall	.-42     	; 0x10e <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 138:	21 96       	adiw	r28, 0x01	; 1
 13a:	88 81       	ld	r24, Y
 13c:	81 11       	cpse	r24, r1
 13e:	fb cf       	rjmp	.-10     	; 0x136 <lcd_write_string+0x8>
		lcd_write_data(*str);
	}
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <lcd_write_command>:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_command(unsigned char byte)

{
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 14a:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<LCD_RS);
 14c:	85 b3       	in	r24, 0x15	; 21
 14e:	8b 7f       	andi	r24, 0xFB	; 251
 150:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 152:	b2 df       	rcall	.-156    	; 0xb8 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 154:	c2 95       	swap	r28
 156:	c0 7f       	andi	r28, 0xF0	; 240
 158:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1<<LCD_RS);
 15a:	85 b3       	in	r24, 0x15	; 21
 15c:	8b 7f       	andi	r24, 0xFB	; 251
	lcd_strobe_lcd_e();
 15e:	85 bb       	out	0x15, r24	; 21
 160:	ab df       	rcall	.-170    	; 0xb8 <lcd_strobe_lcd_e>
}
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <lcd_clear>:

void lcd_clear(void) {
	lcd_write_command(0x01); // Clear display command
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	ee df       	rcall	.-36     	; 0x146 <lcd_write_command>
 16a:	8f e9       	ldi	r24, 0x9F	; 159
 16c:	9f e0       	ldi	r25, 0x0F	; 15
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <lcd_clear+0x8>
 172:	00 c0       	rjmp	.+0      	; 0x174 <lcd_clear+0xe>
 174:	00 00       	nop
 176:	08 95       	ret

00000178 <wait>:
#define BIT(x) (1 << (x))

// Wachtfunctie voor 'ms' milliseconden
void wait(int ms)
{
	for (int tms = 0; tms < ms; tms++)
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	08 c0       	rjmp	.+16     	; 0x18e <wait+0x16>
 17e:	ef ec       	ldi	r30, 0xCF	; 207
 180:	f7 e0       	ldi	r31, 0x07	; 7
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <wait+0xa>
 186:	00 c0       	rjmp	.+0      	; 0x188 <wait+0x10>
 188:	00 00       	nop
 18a:	2f 5f       	subi	r18, 0xFF	; 255
 18c:	3f 4f       	sbci	r19, 0xFF	; 255
 18e:	28 17       	cp	r18, r24
 190:	39 07       	cpc	r19, r25
 192:	ac f3       	brlt	.-22     	; 0x17e <wait+0x6>
	{
		_delay_ms(1);
	}
}
 194:	08 95       	ret

00000196 <adcInit>:

// Initialiseer ADC voor kanaal 3, 8-bit resolutie, enkelvoudige meting
void adcInit(void)
{
	ADMUX = 0b11100011; // Interne referentie 2,56V, left-adjusted, kanaal 3 (PF3)
 196:	83 ee       	ldi	r24, 0xE3	; 227
 198:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000110; // ADC-enable, geen interrupt, geen free-running, prescaler 64
 19a:	86 e8       	ldi	r24, 0x86	; 134
 19c:	86 b9       	out	0x06, r24	; 6
 19e:	08 95       	ret

000001a0 <adcRead>:
}

// Start een enkele ADC meting en retourneer 8-bit resultaat
uint8_t adcRead()
{
	ADCSRA |= BIT(6); // Start conversie
 1a0:	86 b1       	in	r24, 0x06	; 6
 1a2:	80 64       	ori	r24, 0x40	; 64
 1a4:	86 b9       	out	0x06, r24	; 6
	while (ADCSRA & BIT(6)); // Wachten tot conversie klaar is
 1a6:	36 99       	sbic	0x06, 6	; 6
 1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <adcRead+0x6>
	return ADCH; // Alleen de hoogste 8 bits gebruiken
 1aa:	85 b1       	in	r24, 0x05	; 5
}
 1ac:	08 95       	ret

000001ae <print_temperature_lcd>:

// Methode die de temperatuur toont op het scherm
void print_temperature_lcd(int temperature) {
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
 1ba:	6e 97       	sbiw	r28, 0x1e	; 30
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	f8 94       	cli
 1c0:	de bf       	out	0x3e, r29	; 62
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	cd bf       	out	0x3d, r28	; 61
 1c6:	18 2f       	mov	r17, r24
 1c8:	09 2f       	mov	r16, r25
	lcd_clear();
 1ca:	cd df       	rcall	.-102    	; 0x166 <lcd_clear>
	char tempString[30];
	sprintf(tempString, "Temperature %d", temperature);
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	9f 93       	push	r25
 1d6:	8f 93       	push	r24
 1d8:	8e 01       	movw	r16, r28
 1da:	0f 5f       	subi	r16, 0xFF	; 255
 1dc:	1f 4f       	sbci	r17, 0xFF	; 255
 1de:	1f 93       	push	r17
 1e0:	0f 93       	push	r16
 1e2:	26 d0       	rcall	.+76     	; 0x230 <sprintf>
	lcd_write_string(tempString);
 1e4:	c8 01       	movw	r24, r16
 1e6:	a3 df       	rcall	.-186    	; 0x12e <lcd_write_string>
 1e8:	0f 90       	pop	r0
}
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	6e 96       	adiw	r28, 0x1e	; 30
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	1f 91       	pop	r17
 206:	0f 91       	pop	r16
 208:	08 95       	ret

0000020a <main>:
 20a:	8f ef       	ldi	r24, 0xFF	; 255


int main(void)
{	
	DDRD = 0xFF;		// PORTD(7) output, PORTD(6:0) input
 20c:	81 bb       	out	0x11, r24	; 17
	DDRF = 0x00;		// PORTF als input (ADC)
 20e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRA = 0xFF;		// PORTA als output
 212:	8a bb       	out	0x1a, r24	; 26
	adcInit();			// Initialiseer ADC
 214:	c0 df       	rcall	.-128    	; 0x196 <adcInit>
	init_4bits_mode();	// Initialiseer LCD
 216:	63 df       	rcall	.-314    	; 0xde <init_4bits_mode>
	lcd_clear();		// LCD clearen
 218:	a6 df       	rcall	.-180    	; 0x166 <lcd_clear>

		lcd_write_string("Temperature Test");
 21a:	8f e0       	ldi	r24, 0x0F	; 15
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	87 df       	rcall	.-242    	; 0x12e <lcd_write_string>

	while (1)
	{
		wait(1000);					// Wachten op aanvraag (polling)
 220:	88 ee       	ldi	r24, 0xE8	; 232
 222:	93 e0       	ldi	r25, 0x03	; 3
 224:	a9 df       	rcall	.-174    	; 0x178 <wait>
		uint8_t adcValue = adcRead();	// Start conversie en toon 8-bit resultaat
 226:	bc df       	rcall	.-136    	; 0x1a0 <adcRead>
 228:	8b bb       	out	0x1b, r24	; 27
		PORTA = adcValue;				// Data tonen op LEDs
 22a:	90 e0       	ldi	r25, 0x00	; 0
		print_temperature_lcd(adcValue);	// temperatuur naar LCD printen
 22c:	c0 df       	rcall	.-128    	; 0x1ae <print_temperature_lcd>
 22e:	f8 cf       	rjmp	.-16     	; 0x220 <main+0x16>

00000230 <sprintf>:
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	2e 97       	sbiw	r28, 0x0e	; 14
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
 248:	0d 89       	ldd	r16, Y+21	; 0x15
 24a:	1e 89       	ldd	r17, Y+22	; 0x16
 24c:	86 e0       	ldi	r24, 0x06	; 6
 24e:	8c 83       	std	Y+4, r24	; 0x04
 250:	1a 83       	std	Y+2, r17	; 0x02
 252:	09 83       	std	Y+1, r16	; 0x01
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	9f e7       	ldi	r25, 0x7F	; 127
 258:	9e 83       	std	Y+6, r25	; 0x06
 25a:	8d 83       	std	Y+5, r24	; 0x05
 25c:	ae 01       	movw	r20, r28
 25e:	47 5e       	subi	r20, 0xE7	; 231
 260:	5f 4f       	sbci	r21, 0xFF	; 255
 262:	6f 89       	ldd	r22, Y+23	; 0x17
 264:	78 8d       	ldd	r23, Y+24	; 0x18
 266:	ce 01       	movw	r24, r28
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	10 d0       	rcall	.+32     	; 0x28c <vfprintf>
 26c:	ef 81       	ldd	r30, Y+7	; 0x07
 26e:	f8 85       	ldd	r31, Y+8	; 0x08
 270:	e0 0f       	add	r30, r16
 272:	f1 1f       	adc	r31, r17
 274:	10 82       	st	Z, r1
 276:	2e 96       	adiw	r28, 0x0e	; 14
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	f8 94       	cli
 27c:	de bf       	out	0x3e, r29	; 62
 27e:	0f be       	out	0x3f, r0	; 63
 280:	cd bf       	out	0x3d, r28	; 61
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	0f 91       	pop	r16
 28a:	08 95       	ret

0000028c <vfprintf>:
 28c:	2f 92       	push	r2
 28e:	3f 92       	push	r3
 290:	4f 92       	push	r4
 292:	5f 92       	push	r5
 294:	6f 92       	push	r6
 296:	7f 92       	push	r7
 298:	8f 92       	push	r8
 29a:	9f 92       	push	r9
 29c:	af 92       	push	r10
 29e:	bf 92       	push	r11
 2a0:	cf 92       	push	r12
 2a2:	df 92       	push	r13
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	2b 97       	sbiw	r28, 0x0b	; 11
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
 2c0:	6c 01       	movw	r12, r24
 2c2:	7b 01       	movw	r14, r22
 2c4:	8a 01       	movw	r16, r20
 2c6:	fc 01       	movw	r30, r24
 2c8:	17 82       	std	Z+7, r1	; 0x07
 2ca:	16 82       	std	Z+6, r1	; 0x06
 2cc:	83 81       	ldd	r24, Z+3	; 0x03
 2ce:	81 ff       	sbrs	r24, 1
 2d0:	bf c1       	rjmp	.+894    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 2d2:	ce 01       	movw	r24, r28
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	3c 01       	movw	r6, r24
 2d8:	f6 01       	movw	r30, r12
 2da:	93 81       	ldd	r25, Z+3	; 0x03
 2dc:	f7 01       	movw	r30, r14
 2de:	93 fd       	sbrc	r25, 3
 2e0:	85 91       	lpm	r24, Z+
 2e2:	93 ff       	sbrs	r25, 3
 2e4:	81 91       	ld	r24, Z+
 2e6:	7f 01       	movw	r14, r30
 2e8:	88 23       	and	r24, r24
 2ea:	09 f4       	brne	.+2      	; 0x2ee <vfprintf+0x62>
 2ec:	ad c1       	rjmp	.+858    	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 2ee:	85 32       	cpi	r24, 0x25	; 37
 2f0:	39 f4       	brne	.+14     	; 0x300 <vfprintf+0x74>
 2f2:	93 fd       	sbrc	r25, 3
 2f4:	85 91       	lpm	r24, Z+
 2f6:	93 ff       	sbrs	r25, 3
 2f8:	81 91       	ld	r24, Z+
 2fa:	7f 01       	movw	r14, r30
 2fc:	85 32       	cpi	r24, 0x25	; 37
 2fe:	21 f4       	brne	.+8      	; 0x308 <vfprintf+0x7c>
 300:	b6 01       	movw	r22, r12
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	d6 d1       	rcall	.+940    	; 0x6b2 <fputc>
 306:	e8 cf       	rjmp	.-48     	; 0x2d8 <vfprintf+0x4c>
 308:	91 2c       	mov	r9, r1
 30a:	21 2c       	mov	r2, r1
 30c:	31 2c       	mov	r3, r1
 30e:	ff e1       	ldi	r31, 0x1F	; 31
 310:	f3 15       	cp	r31, r3
 312:	d8 f0       	brcs	.+54     	; 0x34a <vfprintf+0xbe>
 314:	8b 32       	cpi	r24, 0x2B	; 43
 316:	79 f0       	breq	.+30     	; 0x336 <vfprintf+0xaa>
 318:	38 f4       	brcc	.+14     	; 0x328 <vfprintf+0x9c>
 31a:	80 32       	cpi	r24, 0x20	; 32
 31c:	79 f0       	breq	.+30     	; 0x33c <vfprintf+0xb0>
 31e:	83 32       	cpi	r24, 0x23	; 35
 320:	a1 f4       	brne	.+40     	; 0x34a <vfprintf+0xbe>
 322:	23 2d       	mov	r18, r3
 324:	20 61       	ori	r18, 0x10	; 16
 326:	1d c0       	rjmp	.+58     	; 0x362 <vfprintf+0xd6>
 328:	8d 32       	cpi	r24, 0x2D	; 45
 32a:	61 f0       	breq	.+24     	; 0x344 <vfprintf+0xb8>
 32c:	80 33       	cpi	r24, 0x30	; 48
 32e:	69 f4       	brne	.+26     	; 0x34a <vfprintf+0xbe>
 330:	23 2d       	mov	r18, r3
 332:	21 60       	ori	r18, 0x01	; 1
 334:	16 c0       	rjmp	.+44     	; 0x362 <vfprintf+0xd6>
 336:	83 2d       	mov	r24, r3
 338:	82 60       	ori	r24, 0x02	; 2
 33a:	38 2e       	mov	r3, r24
 33c:	e3 2d       	mov	r30, r3
 33e:	e4 60       	ori	r30, 0x04	; 4
 340:	3e 2e       	mov	r3, r30
 342:	2a c0       	rjmp	.+84     	; 0x398 <vfprintf+0x10c>
 344:	f3 2d       	mov	r31, r3
 346:	f8 60       	ori	r31, 0x08	; 8
 348:	1d c0       	rjmp	.+58     	; 0x384 <vfprintf+0xf8>
 34a:	37 fc       	sbrc	r3, 7
 34c:	2d c0       	rjmp	.+90     	; 0x3a8 <vfprintf+0x11c>
 34e:	20 ed       	ldi	r18, 0xD0	; 208
 350:	28 0f       	add	r18, r24
 352:	2a 30       	cpi	r18, 0x0A	; 10
 354:	40 f0       	brcs	.+16     	; 0x366 <vfprintf+0xda>
 356:	8e 32       	cpi	r24, 0x2E	; 46
 358:	b9 f4       	brne	.+46     	; 0x388 <vfprintf+0xfc>
 35a:	36 fc       	sbrc	r3, 6
 35c:	75 c1       	rjmp	.+746    	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 35e:	23 2d       	mov	r18, r3
 360:	20 64       	ori	r18, 0x40	; 64
 362:	32 2e       	mov	r3, r18
 364:	19 c0       	rjmp	.+50     	; 0x398 <vfprintf+0x10c>
 366:	36 fe       	sbrs	r3, 6
 368:	06 c0       	rjmp	.+12     	; 0x376 <vfprintf+0xea>
 36a:	8a e0       	ldi	r24, 0x0A	; 10
 36c:	98 9e       	mul	r9, r24
 36e:	20 0d       	add	r18, r0
 370:	11 24       	eor	r1, r1
 372:	92 2e       	mov	r9, r18
 374:	11 c0       	rjmp	.+34     	; 0x398 <vfprintf+0x10c>
 376:	ea e0       	ldi	r30, 0x0A	; 10
 378:	2e 9e       	mul	r2, r30
 37a:	20 0d       	add	r18, r0
 37c:	11 24       	eor	r1, r1
 37e:	22 2e       	mov	r2, r18
 380:	f3 2d       	mov	r31, r3
 382:	f0 62       	ori	r31, 0x20	; 32
 384:	3f 2e       	mov	r3, r31
 386:	08 c0       	rjmp	.+16     	; 0x398 <vfprintf+0x10c>
 388:	8c 36       	cpi	r24, 0x6C	; 108
 38a:	21 f4       	brne	.+8      	; 0x394 <vfprintf+0x108>
 38c:	83 2d       	mov	r24, r3
 38e:	80 68       	ori	r24, 0x80	; 128
 390:	38 2e       	mov	r3, r24
 392:	02 c0       	rjmp	.+4      	; 0x398 <vfprintf+0x10c>
 394:	88 36       	cpi	r24, 0x68	; 104
 396:	41 f4       	brne	.+16     	; 0x3a8 <vfprintf+0x11c>
 398:	f7 01       	movw	r30, r14
 39a:	93 fd       	sbrc	r25, 3
 39c:	85 91       	lpm	r24, Z+
 39e:	93 ff       	sbrs	r25, 3
 3a0:	81 91       	ld	r24, Z+
 3a2:	7f 01       	movw	r14, r30
 3a4:	81 11       	cpse	r24, r1
 3a6:	b3 cf       	rjmp	.-154    	; 0x30e <vfprintf+0x82>
 3a8:	98 2f       	mov	r25, r24
 3aa:	9f 7d       	andi	r25, 0xDF	; 223
 3ac:	95 54       	subi	r25, 0x45	; 69
 3ae:	93 30       	cpi	r25, 0x03	; 3
 3b0:	28 f4       	brcc	.+10     	; 0x3bc <vfprintf+0x130>
 3b2:	0c 5f       	subi	r16, 0xFC	; 252
 3b4:	1f 4f       	sbci	r17, 0xFF	; 255
 3b6:	9f e3       	ldi	r25, 0x3F	; 63
 3b8:	99 83       	std	Y+1, r25	; 0x01
 3ba:	0d c0       	rjmp	.+26     	; 0x3d6 <vfprintf+0x14a>
 3bc:	83 36       	cpi	r24, 0x63	; 99
 3be:	31 f0       	breq	.+12     	; 0x3cc <vfprintf+0x140>
 3c0:	83 37       	cpi	r24, 0x73	; 115
 3c2:	71 f0       	breq	.+28     	; 0x3e0 <vfprintf+0x154>
 3c4:	83 35       	cpi	r24, 0x53	; 83
 3c6:	09 f0       	breq	.+2      	; 0x3ca <vfprintf+0x13e>
 3c8:	55 c0       	rjmp	.+170    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 3ca:	20 c0       	rjmp	.+64     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3cc:	f8 01       	movw	r30, r16
 3ce:	80 81       	ld	r24, Z
 3d0:	89 83       	std	Y+1, r24	; 0x01
 3d2:	0e 5f       	subi	r16, 0xFE	; 254
 3d4:	1f 4f       	sbci	r17, 0xFF	; 255
 3d6:	88 24       	eor	r8, r8
 3d8:	83 94       	inc	r8
 3da:	91 2c       	mov	r9, r1
 3dc:	53 01       	movw	r10, r6
 3de:	12 c0       	rjmp	.+36     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3e0:	28 01       	movw	r4, r16
 3e2:	f2 e0       	ldi	r31, 0x02	; 2
 3e4:	4f 0e       	add	r4, r31
 3e6:	51 1c       	adc	r5, r1
 3e8:	f8 01       	movw	r30, r16
 3ea:	a0 80       	ld	r10, Z
 3ec:	b1 80       	ldd	r11, Z+1	; 0x01
 3ee:	36 fe       	sbrs	r3, 6
 3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <vfprintf+0x16c>
 3f2:	69 2d       	mov	r22, r9
 3f4:	70 e0       	ldi	r23, 0x00	; 0
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <vfprintf+0x170>
 3f8:	6f ef       	ldi	r22, 0xFF	; 255
 3fa:	7f ef       	ldi	r23, 0xFF	; 255
 3fc:	c5 01       	movw	r24, r10
 3fe:	4e d1       	rcall	.+668    	; 0x69c <strnlen>
 400:	4c 01       	movw	r8, r24
 402:	82 01       	movw	r16, r4
 404:	f3 2d       	mov	r31, r3
 406:	ff 77       	andi	r31, 0x7F	; 127
 408:	3f 2e       	mov	r3, r31
 40a:	15 c0       	rjmp	.+42     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 40c:	28 01       	movw	r4, r16
 40e:	22 e0       	ldi	r18, 0x02	; 2
 410:	42 0e       	add	r4, r18
 412:	51 1c       	adc	r5, r1
 414:	f8 01       	movw	r30, r16
 416:	a0 80       	ld	r10, Z
 418:	b1 80       	ldd	r11, Z+1	; 0x01
 41a:	36 fe       	sbrs	r3, 6
 41c:	03 c0       	rjmp	.+6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 41e:	69 2d       	mov	r22, r9
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	02 c0       	rjmp	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 424:	6f ef       	ldi	r22, 0xFF	; 255
 426:	7f ef       	ldi	r23, 0xFF	; 255
 428:	c5 01       	movw	r24, r10
 42a:	2d d1       	rcall	.+602    	; 0x686 <strnlen_P>
 42c:	4c 01       	movw	r8, r24
 42e:	f3 2d       	mov	r31, r3
 430:	f0 68       	ori	r31, 0x80	; 128
 432:	3f 2e       	mov	r3, r31
 434:	82 01       	movw	r16, r4
 436:	33 fc       	sbrc	r3, 3
 438:	19 c0       	rjmp	.+50     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 43a:	82 2d       	mov	r24, r2
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	88 16       	cp	r8, r24
 440:	99 06       	cpc	r9, r25
 442:	a0 f4       	brcc	.+40     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 444:	b6 01       	movw	r22, r12
 446:	80 e2       	ldi	r24, 0x20	; 32
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	33 d1       	rcall	.+614    	; 0x6b2 <fputc>
 44c:	2a 94       	dec	r2
 44e:	f5 cf       	rjmp	.-22     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 450:	f5 01       	movw	r30, r10
 452:	37 fc       	sbrc	r3, 7
 454:	85 91       	lpm	r24, Z+
 456:	37 fe       	sbrs	r3, 7
 458:	81 91       	ld	r24, Z+
 45a:	5f 01       	movw	r10, r30
 45c:	b6 01       	movw	r22, r12
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	28 d1       	rcall	.+592    	; 0x6b2 <fputc>
 462:	21 10       	cpse	r2, r1
 464:	2a 94       	dec	r2
 466:	21 e0       	ldi	r18, 0x01	; 1
 468:	82 1a       	sub	r8, r18
 46a:	91 08       	sbc	r9, r1
 46c:	81 14       	cp	r8, r1
 46e:	91 04       	cpc	r9, r1
 470:	79 f7       	brne	.-34     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 472:	e1 c0       	rjmp	.+450    	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 474:	84 36       	cpi	r24, 0x64	; 100
 476:	11 f0       	breq	.+4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 478:	89 36       	cpi	r24, 0x69	; 105
 47a:	39 f5       	brne	.+78     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 47c:	f8 01       	movw	r30, r16
 47e:	37 fe       	sbrs	r3, 7
 480:	07 c0       	rjmp	.+14     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 482:	60 81       	ld	r22, Z
 484:	71 81       	ldd	r23, Z+1	; 0x01
 486:	82 81       	ldd	r24, Z+2	; 0x02
 488:	93 81       	ldd	r25, Z+3	; 0x03
 48a:	0c 5f       	subi	r16, 0xFC	; 252
 48c:	1f 4f       	sbci	r17, 0xFF	; 255
 48e:	08 c0       	rjmp	.+16     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 490:	60 81       	ld	r22, Z
 492:	71 81       	ldd	r23, Z+1	; 0x01
 494:	07 2e       	mov	r0, r23
 496:	00 0c       	add	r0, r0
 498:	88 0b       	sbc	r24, r24
 49a:	99 0b       	sbc	r25, r25
 49c:	0e 5f       	subi	r16, 0xFE	; 254
 49e:	1f 4f       	sbci	r17, 0xFF	; 255
 4a0:	f3 2d       	mov	r31, r3
 4a2:	ff 76       	andi	r31, 0x6F	; 111
 4a4:	3f 2e       	mov	r3, r31
 4a6:	97 ff       	sbrs	r25, 7
 4a8:	09 c0       	rjmp	.+18     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4aa:	90 95       	com	r25
 4ac:	80 95       	com	r24
 4ae:	70 95       	com	r23
 4b0:	61 95       	neg	r22
 4b2:	7f 4f       	sbci	r23, 0xFF	; 255
 4b4:	8f 4f       	sbci	r24, 0xFF	; 255
 4b6:	9f 4f       	sbci	r25, 0xFF	; 255
 4b8:	f0 68       	ori	r31, 0x80	; 128
 4ba:	3f 2e       	mov	r3, r31
 4bc:	2a e0       	ldi	r18, 0x0A	; 10
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	a3 01       	movw	r20, r6
 4c2:	33 d1       	rcall	.+614    	; 0x72a <__ultoa_invert>
 4c4:	88 2e       	mov	r8, r24
 4c6:	86 18       	sub	r8, r6
 4c8:	44 c0       	rjmp	.+136    	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 4ca:	85 37       	cpi	r24, 0x75	; 117
 4cc:	31 f4       	brne	.+12     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4ce:	23 2d       	mov	r18, r3
 4d0:	2f 7e       	andi	r18, 0xEF	; 239
 4d2:	b2 2e       	mov	r11, r18
 4d4:	2a e0       	ldi	r18, 0x0A	; 10
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	25 c0       	rjmp	.+74     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 4da:	93 2d       	mov	r25, r3
 4dc:	99 7f       	andi	r25, 0xF9	; 249
 4de:	b9 2e       	mov	r11, r25
 4e0:	8f 36       	cpi	r24, 0x6F	; 111
 4e2:	c1 f0       	breq	.+48     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 4e4:	18 f4       	brcc	.+6      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 4e6:	88 35       	cpi	r24, 0x58	; 88
 4e8:	79 f0       	breq	.+30     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 4ea:	ae c0       	rjmp	.+348    	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 4ec:	80 37       	cpi	r24, 0x70	; 112
 4ee:	19 f0       	breq	.+6      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4f0:	88 37       	cpi	r24, 0x78	; 120
 4f2:	21 f0       	breq	.+8      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4f4:	a9 c0       	rjmp	.+338    	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 4f6:	e9 2f       	mov	r30, r25
 4f8:	e0 61       	ori	r30, 0x10	; 16
 4fa:	be 2e       	mov	r11, r30
 4fc:	b4 fe       	sbrs	r11, 4
 4fe:	0d c0       	rjmp	.+26     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 500:	fb 2d       	mov	r31, r11
 502:	f4 60       	ori	r31, 0x04	; 4
 504:	bf 2e       	mov	r11, r31
 506:	09 c0       	rjmp	.+18     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 508:	34 fe       	sbrs	r3, 4
 50a:	0a c0       	rjmp	.+20     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 50c:	29 2f       	mov	r18, r25
 50e:	26 60       	ori	r18, 0x06	; 6
 510:	b2 2e       	mov	r11, r18
 512:	06 c0       	rjmp	.+12     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 514:	28 e0       	ldi	r18, 0x08	; 8
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	05 c0       	rjmp	.+10     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 51a:	20 e1       	ldi	r18, 0x10	; 16
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 520:	20 e1       	ldi	r18, 0x10	; 16
 522:	32 e0       	ldi	r19, 0x02	; 2
 524:	f8 01       	movw	r30, r16
 526:	b7 fe       	sbrs	r11, 7
 528:	07 c0       	rjmp	.+14     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 52a:	60 81       	ld	r22, Z
 52c:	71 81       	ldd	r23, Z+1	; 0x01
 52e:	82 81       	ldd	r24, Z+2	; 0x02
 530:	93 81       	ldd	r25, Z+3	; 0x03
 532:	0c 5f       	subi	r16, 0xFC	; 252
 534:	1f 4f       	sbci	r17, 0xFF	; 255
 536:	06 c0       	rjmp	.+12     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 538:	60 81       	ld	r22, Z
 53a:	71 81       	ldd	r23, Z+1	; 0x01
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 5f       	subi	r16, 0xFE	; 254
 542:	1f 4f       	sbci	r17, 0xFF	; 255
 544:	a3 01       	movw	r20, r6
 546:	f1 d0       	rcall	.+482    	; 0x72a <__ultoa_invert>
 548:	88 2e       	mov	r8, r24
 54a:	86 18       	sub	r8, r6
 54c:	fb 2d       	mov	r31, r11
 54e:	ff 77       	andi	r31, 0x7F	; 127
 550:	3f 2e       	mov	r3, r31
 552:	36 fe       	sbrs	r3, 6
 554:	0d c0       	rjmp	.+26     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
 556:	23 2d       	mov	r18, r3
 558:	2e 7f       	andi	r18, 0xFE	; 254
 55a:	a2 2e       	mov	r10, r18
 55c:	89 14       	cp	r8, r9
 55e:	58 f4       	brcc	.+22     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 560:	34 fe       	sbrs	r3, 4
 562:	0b c0       	rjmp	.+22     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 564:	32 fc       	sbrc	r3, 2
 566:	09 c0       	rjmp	.+18     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 568:	83 2d       	mov	r24, r3
 56a:	8e 7e       	andi	r24, 0xEE	; 238
 56c:	a8 2e       	mov	r10, r24
 56e:	05 c0       	rjmp	.+10     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 570:	b8 2c       	mov	r11, r8
 572:	a3 2c       	mov	r10, r3
 574:	03 c0       	rjmp	.+6      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 576:	b8 2c       	mov	r11, r8
 578:	01 c0       	rjmp	.+2      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 57a:	b9 2c       	mov	r11, r9
 57c:	a4 fe       	sbrs	r10, 4
 57e:	0f c0       	rjmp	.+30     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 580:	fe 01       	movw	r30, r28
 582:	e8 0d       	add	r30, r8
 584:	f1 1d       	adc	r31, r1
 586:	80 81       	ld	r24, Z
 588:	80 33       	cpi	r24, 0x30	; 48
 58a:	21 f4       	brne	.+8      	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 58c:	9a 2d       	mov	r25, r10
 58e:	99 7e       	andi	r25, 0xE9	; 233
 590:	a9 2e       	mov	r10, r25
 592:	09 c0       	rjmp	.+18     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 594:	a2 fe       	sbrs	r10, 2
 596:	06 c0       	rjmp	.+12     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 598:	b3 94       	inc	r11
 59a:	b3 94       	inc	r11
 59c:	04 c0       	rjmp	.+8      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 59e:	8a 2d       	mov	r24, r10
 5a0:	86 78       	andi	r24, 0x86	; 134
 5a2:	09 f0       	breq	.+2      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 5a4:	b3 94       	inc	r11
 5a6:	a3 fc       	sbrc	r10, 3
 5a8:	10 c0       	rjmp	.+32     	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5aa:	a0 fe       	sbrs	r10, 0
 5ac:	06 c0       	rjmp	.+12     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5ae:	b2 14       	cp	r11, r2
 5b0:	80 f4       	brcc	.+32     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5b2:	28 0c       	add	r2, r8
 5b4:	92 2c       	mov	r9, r2
 5b6:	9b 18       	sub	r9, r11
 5b8:	0d c0       	rjmp	.+26     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5ba:	b2 14       	cp	r11, r2
 5bc:	58 f4       	brcc	.+22     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5be:	b6 01       	movw	r22, r12
 5c0:	80 e2       	ldi	r24, 0x20	; 32
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	76 d0       	rcall	.+236    	; 0x6b2 <fputc>
 5c6:	b3 94       	inc	r11
 5c8:	f8 cf       	rjmp	.-16     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5ca:	b2 14       	cp	r11, r2
 5cc:	18 f4       	brcc	.+6      	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5ce:	2b 18       	sub	r2, r11
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5d2:	98 2c       	mov	r9, r8
 5d4:	21 2c       	mov	r2, r1
 5d6:	a4 fe       	sbrs	r10, 4
 5d8:	0f c0       	rjmp	.+30     	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 5da:	b6 01       	movw	r22, r12
 5dc:	80 e3       	ldi	r24, 0x30	; 48
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	68 d0       	rcall	.+208    	; 0x6b2 <fputc>
 5e2:	a2 fe       	sbrs	r10, 2
 5e4:	16 c0       	rjmp	.+44     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 5e6:	a1 fc       	sbrc	r10, 1
 5e8:	03 c0       	rjmp	.+6      	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 5ea:	88 e7       	ldi	r24, 0x78	; 120
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5f0:	88 e5       	ldi	r24, 0x58	; 88
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	b6 01       	movw	r22, r12
 5f6:	0c c0       	rjmp	.+24     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 5f8:	8a 2d       	mov	r24, r10
 5fa:	86 78       	andi	r24, 0x86	; 134
 5fc:	51 f0       	breq	.+20     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 5fe:	a1 fe       	sbrs	r10, 1
 600:	02 c0       	rjmp	.+4      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 602:	8b e2       	ldi	r24, 0x2B	; 43
 604:	01 c0       	rjmp	.+2      	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 606:	80 e2       	ldi	r24, 0x20	; 32
 608:	a7 fc       	sbrc	r10, 7
 60a:	8d e2       	ldi	r24, 0x2D	; 45
 60c:	b6 01       	movw	r22, r12
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	50 d0       	rcall	.+160    	; 0x6b2 <fputc>
 612:	89 14       	cp	r8, r9
 614:	30 f4       	brcc	.+12     	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 616:	b6 01       	movw	r22, r12
 618:	80 e3       	ldi	r24, 0x30	; 48
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	4a d0       	rcall	.+148    	; 0x6b2 <fputc>
 61e:	9a 94       	dec	r9
 620:	f8 cf       	rjmp	.-16     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 622:	8a 94       	dec	r8
 624:	f3 01       	movw	r30, r6
 626:	e8 0d       	add	r30, r8
 628:	f1 1d       	adc	r31, r1
 62a:	80 81       	ld	r24, Z
 62c:	b6 01       	movw	r22, r12
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	40 d0       	rcall	.+128    	; 0x6b2 <fputc>
 632:	81 10       	cpse	r8, r1
 634:	f6 cf       	rjmp	.-20     	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 636:	22 20       	and	r2, r2
 638:	09 f4       	brne	.+2      	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 63a:	4e ce       	rjmp	.-868    	; 0x2d8 <vfprintf+0x4c>
 63c:	b6 01       	movw	r22, r12
 63e:	80 e2       	ldi	r24, 0x20	; 32
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	37 d0       	rcall	.+110    	; 0x6b2 <fputc>
 644:	2a 94       	dec	r2
 646:	f7 cf       	rjmp	.-18     	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 648:	f6 01       	movw	r30, r12
 64a:	86 81       	ldd	r24, Z+6	; 0x06
 64c:	97 81       	ldd	r25, Z+7	; 0x07
 64e:	02 c0       	rjmp	.+4      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 650:	8f ef       	ldi	r24, 0xFF	; 255
 652:	9f ef       	ldi	r25, 0xFF	; 255
 654:	2b 96       	adiw	r28, 0x0b	; 11
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	f8 94       	cli
 65a:	de bf       	out	0x3e, r29	; 62
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	cd bf       	out	0x3d, r28	; 61
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	1f 91       	pop	r17
 666:	0f 91       	pop	r16
 668:	ff 90       	pop	r15
 66a:	ef 90       	pop	r14
 66c:	df 90       	pop	r13
 66e:	cf 90       	pop	r12
 670:	bf 90       	pop	r11
 672:	af 90       	pop	r10
 674:	9f 90       	pop	r9
 676:	8f 90       	pop	r8
 678:	7f 90       	pop	r7
 67a:	6f 90       	pop	r6
 67c:	5f 90       	pop	r5
 67e:	4f 90       	pop	r4
 680:	3f 90       	pop	r3
 682:	2f 90       	pop	r2
 684:	08 95       	ret

00000686 <strnlen_P>:
 686:	fc 01       	movw	r30, r24
 688:	05 90       	lpm	r0, Z+
 68a:	61 50       	subi	r22, 0x01	; 1
 68c:	70 40       	sbci	r23, 0x00	; 0
 68e:	01 10       	cpse	r0, r1
 690:	d8 f7       	brcc	.-10     	; 0x688 <strnlen_P+0x2>
 692:	80 95       	com	r24
 694:	90 95       	com	r25
 696:	8e 0f       	add	r24, r30
 698:	9f 1f       	adc	r25, r31
 69a:	08 95       	ret

0000069c <strnlen>:
 69c:	fc 01       	movw	r30, r24
 69e:	61 50       	subi	r22, 0x01	; 1
 6a0:	70 40       	sbci	r23, 0x00	; 0
 6a2:	01 90       	ld	r0, Z+
 6a4:	01 10       	cpse	r0, r1
 6a6:	d8 f7       	brcc	.-10     	; 0x69e <strnlen+0x2>
 6a8:	80 95       	com	r24
 6aa:	90 95       	com	r25
 6ac:	8e 0f       	add	r24, r30
 6ae:	9f 1f       	adc	r25, r31
 6b0:	08 95       	ret

000006b2 <fputc>:
 6b2:	0f 93       	push	r16
 6b4:	1f 93       	push	r17
 6b6:	cf 93       	push	r28
 6b8:	df 93       	push	r29
 6ba:	fb 01       	movw	r30, r22
 6bc:	23 81       	ldd	r18, Z+3	; 0x03
 6be:	21 fd       	sbrc	r18, 1
 6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <fputc+0x16>
 6c2:	8f ef       	ldi	r24, 0xFF	; 255
 6c4:	9f ef       	ldi	r25, 0xFF	; 255
 6c6:	2c c0       	rjmp	.+88     	; 0x720 <fputc+0x6e>
 6c8:	22 ff       	sbrs	r18, 2
 6ca:	16 c0       	rjmp	.+44     	; 0x6f8 <fputc+0x46>
 6cc:	46 81       	ldd	r20, Z+6	; 0x06
 6ce:	57 81       	ldd	r21, Z+7	; 0x07
 6d0:	24 81       	ldd	r18, Z+4	; 0x04
 6d2:	35 81       	ldd	r19, Z+5	; 0x05
 6d4:	42 17       	cp	r20, r18
 6d6:	53 07       	cpc	r21, r19
 6d8:	44 f4       	brge	.+16     	; 0x6ea <fputc+0x38>
 6da:	a0 81       	ld	r26, Z
 6dc:	b1 81       	ldd	r27, Z+1	; 0x01
 6de:	9d 01       	movw	r18, r26
 6e0:	2f 5f       	subi	r18, 0xFF	; 255
 6e2:	3f 4f       	sbci	r19, 0xFF	; 255
 6e4:	31 83       	std	Z+1, r19	; 0x01
 6e6:	20 83       	st	Z, r18
 6e8:	8c 93       	st	X, r24
 6ea:	26 81       	ldd	r18, Z+6	; 0x06
 6ec:	37 81       	ldd	r19, Z+7	; 0x07
 6ee:	2f 5f       	subi	r18, 0xFF	; 255
 6f0:	3f 4f       	sbci	r19, 0xFF	; 255
 6f2:	37 83       	std	Z+7, r19	; 0x07
 6f4:	26 83       	std	Z+6, r18	; 0x06
 6f6:	14 c0       	rjmp	.+40     	; 0x720 <fputc+0x6e>
 6f8:	8b 01       	movw	r16, r22
 6fa:	ec 01       	movw	r28, r24
 6fc:	fb 01       	movw	r30, r22
 6fe:	00 84       	ldd	r0, Z+8	; 0x08
 700:	f1 85       	ldd	r31, Z+9	; 0x09
 702:	e0 2d       	mov	r30, r0
 704:	09 95       	icall
 706:	89 2b       	or	r24, r25
 708:	e1 f6       	brne	.-72     	; 0x6c2 <fputc+0x10>
 70a:	d8 01       	movw	r26, r16
 70c:	16 96       	adiw	r26, 0x06	; 6
 70e:	8d 91       	ld	r24, X+
 710:	9c 91       	ld	r25, X
 712:	17 97       	sbiw	r26, 0x07	; 7
 714:	01 96       	adiw	r24, 0x01	; 1
 716:	17 96       	adiw	r26, 0x07	; 7
 718:	9c 93       	st	X, r25
 71a:	8e 93       	st	-X, r24
 71c:	16 97       	sbiw	r26, 0x06	; 6
 71e:	ce 01       	movw	r24, r28
 720:	df 91       	pop	r29
 722:	cf 91       	pop	r28
 724:	1f 91       	pop	r17
 726:	0f 91       	pop	r16
 728:	08 95       	ret

0000072a <__ultoa_invert>:
 72a:	fa 01       	movw	r30, r20
 72c:	aa 27       	eor	r26, r26
 72e:	28 30       	cpi	r18, 0x08	; 8
 730:	51 f1       	breq	.+84     	; 0x786 <__ultoa_invert+0x5c>
 732:	20 31       	cpi	r18, 0x10	; 16
 734:	81 f1       	breq	.+96     	; 0x796 <__ultoa_invert+0x6c>
 736:	e8 94       	clt
 738:	6f 93       	push	r22
 73a:	6e 7f       	andi	r22, 0xFE	; 254
 73c:	6e 5f       	subi	r22, 0xFE	; 254
 73e:	7f 4f       	sbci	r23, 0xFF	; 255
 740:	8f 4f       	sbci	r24, 0xFF	; 255
 742:	9f 4f       	sbci	r25, 0xFF	; 255
 744:	af 4f       	sbci	r26, 0xFF	; 255
 746:	b1 e0       	ldi	r27, 0x01	; 1
 748:	3e d0       	rcall	.+124    	; 0x7c6 <__ultoa_invert+0x9c>
 74a:	b4 e0       	ldi	r27, 0x04	; 4
 74c:	3c d0       	rcall	.+120    	; 0x7c6 <__ultoa_invert+0x9c>
 74e:	67 0f       	add	r22, r23
 750:	78 1f       	adc	r23, r24
 752:	89 1f       	adc	r24, r25
 754:	9a 1f       	adc	r25, r26
 756:	a1 1d       	adc	r26, r1
 758:	68 0f       	add	r22, r24
 75a:	79 1f       	adc	r23, r25
 75c:	8a 1f       	adc	r24, r26
 75e:	91 1d       	adc	r25, r1
 760:	a1 1d       	adc	r26, r1
 762:	6a 0f       	add	r22, r26
 764:	71 1d       	adc	r23, r1
 766:	81 1d       	adc	r24, r1
 768:	91 1d       	adc	r25, r1
 76a:	a1 1d       	adc	r26, r1
 76c:	20 d0       	rcall	.+64     	; 0x7ae <__ultoa_invert+0x84>
 76e:	09 f4       	brne	.+2      	; 0x772 <__ultoa_invert+0x48>
 770:	68 94       	set
 772:	3f 91       	pop	r19
 774:	2a e0       	ldi	r18, 0x0A	; 10
 776:	26 9f       	mul	r18, r22
 778:	11 24       	eor	r1, r1
 77a:	30 19       	sub	r19, r0
 77c:	30 5d       	subi	r19, 0xD0	; 208
 77e:	31 93       	st	Z+, r19
 780:	de f6       	brtc	.-74     	; 0x738 <__ultoa_invert+0xe>
 782:	cf 01       	movw	r24, r30
 784:	08 95       	ret
 786:	46 2f       	mov	r20, r22
 788:	47 70       	andi	r20, 0x07	; 7
 78a:	40 5d       	subi	r20, 0xD0	; 208
 78c:	41 93       	st	Z+, r20
 78e:	b3 e0       	ldi	r27, 0x03	; 3
 790:	0f d0       	rcall	.+30     	; 0x7b0 <__ultoa_invert+0x86>
 792:	c9 f7       	brne	.-14     	; 0x786 <__ultoa_invert+0x5c>
 794:	f6 cf       	rjmp	.-20     	; 0x782 <__ultoa_invert+0x58>
 796:	46 2f       	mov	r20, r22
 798:	4f 70       	andi	r20, 0x0F	; 15
 79a:	40 5d       	subi	r20, 0xD0	; 208
 79c:	4a 33       	cpi	r20, 0x3A	; 58
 79e:	18 f0       	brcs	.+6      	; 0x7a6 <__ultoa_invert+0x7c>
 7a0:	49 5d       	subi	r20, 0xD9	; 217
 7a2:	31 fd       	sbrc	r19, 1
 7a4:	40 52       	subi	r20, 0x20	; 32
 7a6:	41 93       	st	Z+, r20
 7a8:	02 d0       	rcall	.+4      	; 0x7ae <__ultoa_invert+0x84>
 7aa:	a9 f7       	brne	.-22     	; 0x796 <__ultoa_invert+0x6c>
 7ac:	ea cf       	rjmp	.-44     	; 0x782 <__ultoa_invert+0x58>
 7ae:	b4 e0       	ldi	r27, 0x04	; 4
 7b0:	a6 95       	lsr	r26
 7b2:	97 95       	ror	r25
 7b4:	87 95       	ror	r24
 7b6:	77 95       	ror	r23
 7b8:	67 95       	ror	r22
 7ba:	ba 95       	dec	r27
 7bc:	c9 f7       	brne	.-14     	; 0x7b0 <__ultoa_invert+0x86>
 7be:	00 97       	sbiw	r24, 0x00	; 0
 7c0:	61 05       	cpc	r22, r1
 7c2:	71 05       	cpc	r23, r1
 7c4:	08 95       	ret
 7c6:	9b 01       	movw	r18, r22
 7c8:	ac 01       	movw	r20, r24
 7ca:	0a 2e       	mov	r0, r26
 7cc:	06 94       	lsr	r0
 7ce:	57 95       	ror	r21
 7d0:	47 95       	ror	r20
 7d2:	37 95       	ror	r19
 7d4:	27 95       	ror	r18
 7d6:	ba 95       	dec	r27
 7d8:	c9 f7       	brne	.-14     	; 0x7cc <__ultoa_invert+0xa2>
 7da:	62 0f       	add	r22, r18
 7dc:	73 1f       	adc	r23, r19
 7de:	84 1f       	adc	r24, r20
 7e0:	95 1f       	adc	r25, r21
 7e2:	a0 1d       	adc	r26, r0
 7e4:	08 95       	ret

000007e6 <_exit>:
 7e6:	f8 94       	cli

000007e8 <__stop_program>:
 7e8:	ff cf       	rjmp	.-2      	; 0x7e8 <__stop_program>
