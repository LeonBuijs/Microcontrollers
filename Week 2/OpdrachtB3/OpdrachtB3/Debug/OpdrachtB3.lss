
OpdrachtB3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000024e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000096e  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000858  00000000  00000000  00000c62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036d  00000000  00000000  000014ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001828  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000479  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fc  00000000  00000000  00001d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001e19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__vector_1>
   6:	00 00       	nop
   8:	7c c0       	rjmp	.+248    	; 0x102 <__vector_2>
   a:	00 00       	nop
   c:	5f c0       	rjmp	.+190    	; 0xcc <__bad_interrupt>
   e:	00 00       	nop
  10:	5d c0       	rjmp	.+186    	; 0xcc <__bad_interrupt>
  12:	00 00       	nop
  14:	5b c0       	rjmp	.+182    	; 0xcc <__bad_interrupt>
  16:	00 00       	nop
  18:	59 c0       	rjmp	.+178    	; 0xcc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	57 c0       	rjmp	.+174    	; 0xcc <__bad_interrupt>
  1e:	00 00       	nop
  20:	55 c0       	rjmp	.+170    	; 0xcc <__bad_interrupt>
  22:	00 00       	nop
  24:	53 c0       	rjmp	.+166    	; 0xcc <__bad_interrupt>
  26:	00 00       	nop
  28:	51 c0       	rjmp	.+162    	; 0xcc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4f c0       	rjmp	.+158    	; 0xcc <__bad_interrupt>
  2e:	00 00       	nop
  30:	4d c0       	rjmp	.+154    	; 0xcc <__bad_interrupt>
  32:	00 00       	nop
  34:	4b c0       	rjmp	.+150    	; 0xcc <__bad_interrupt>
  36:	00 00       	nop
  38:	49 c0       	rjmp	.+146    	; 0xcc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	47 c0       	rjmp	.+142    	; 0xcc <__bad_interrupt>
  3e:	00 00       	nop
  40:	45 c0       	rjmp	.+138    	; 0xcc <__bad_interrupt>
  42:	00 00       	nop
  44:	43 c0       	rjmp	.+134    	; 0xcc <__bad_interrupt>
  46:	00 00       	nop
  48:	41 c0       	rjmp	.+130    	; 0xcc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3f c0       	rjmp	.+126    	; 0xcc <__bad_interrupt>
  4e:	00 00       	nop
  50:	3d c0       	rjmp	.+122    	; 0xcc <__bad_interrupt>
  52:	00 00       	nop
  54:	3b c0       	rjmp	.+118    	; 0xcc <__bad_interrupt>
  56:	00 00       	nop
  58:	39 c0       	rjmp	.+114    	; 0xcc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	37 c0       	rjmp	.+110    	; 0xcc <__bad_interrupt>
  5e:	00 00       	nop
  60:	35 c0       	rjmp	.+106    	; 0xcc <__bad_interrupt>
  62:	00 00       	nop
  64:	33 c0       	rjmp	.+102    	; 0xcc <__bad_interrupt>
  66:	00 00       	nop
  68:	31 c0       	rjmp	.+98     	; 0xcc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2f c0       	rjmp	.+94     	; 0xcc <__bad_interrupt>
  6e:	00 00       	nop
  70:	2d c0       	rjmp	.+90     	; 0xcc <__bad_interrupt>
  72:	00 00       	nop
  74:	2b c0       	rjmp	.+86     	; 0xcc <__bad_interrupt>
  76:	00 00       	nop
  78:	29 c0       	rjmp	.+82     	; 0xcc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	27 c0       	rjmp	.+78     	; 0xcc <__bad_interrupt>
  7e:	00 00       	nop
  80:	25 c0       	rjmp	.+74     	; 0xcc <__bad_interrupt>
  82:	00 00       	nop
  84:	23 c0       	rjmp	.+70     	; 0xcc <__bad_interrupt>
  86:	00 00       	nop
  88:	21 c0       	rjmp	.+66     	; 0xcc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	af 00       	.word	0x00af	; ????
  8e:	b2 00       	.word	0x00b2	; ????
  90:	b5 00       	.word	0x00b5	; ????
  92:	b8 00       	.word	0x00b8	; ????
  94:	bb 00       	.word	0x00bb	; ????
  96:	be 00       	.word	0x00be	; ????
  98:	c1 00       	.word	0x00c1	; ????
  9a:	c4 00       	.word	0x00c4	; ????
  9c:	c7 00       	.word	0x00c7	; ????
  9e:	ca 00       	.word	0x00ca	; ????
  a0:	cd 00       	.word	0x00cd	; ????
  a2:	d0 00       	.word	0x00d0	; ????
  a4:	d3 00       	.word	0x00d3	; ????
  a6:	d6 00       	.word	0x00d6	; ????
  a8:	d9 00       	.word	0x00d9	; ????
  aa:	dc 00       	.word	0x00dc	; ????

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e1       	ldi	r29, 0x10	; 16
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a2 30       	cpi	r26, 0x02	; 2
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	35 d0       	rcall	.+106    	; 0x134 <main>
  ca:	85 c0       	rjmp	.+266    	; 0x1d6 <_exit>

000000cc <__bad_interrupt>:
  cc:	99 cf       	rjmp	.-206    	; 0x0 <__vectors>

000000ce <__vector_1>:

void wait( int ms ) {
	for (int i=0; i<ms; i++) {
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e4:	80 31       	cpi	r24, 0x10	; 16
  e6:	91 05       	cpc	r25, r1
  e8:	2c f4       	brge	.+10     	; 0xf4 <__vector_1+0x26>
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_2>:
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 114:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 118:	99 23       	and	r25, r25
 11a:	2c f0       	brlt	.+10     	; 0x126 <__vector_2+0x24>
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 122:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <main>:

int main( void ) {
	 DDRC = 0xFF;					// PORTC all output
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	84 bb       	out	0x14, r24	; 20
	
	 // Init Interrupt hardware
	 EICRA |= 0x0B;            // INT1 falling edge, INT0 rising edge
 138:	ea e6       	ldi	r30, 0x6A	; 106
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	8b 60       	ori	r24, 0x0B	; 11
 140:	80 83       	st	Z, r24
	 EIMSK |= 0x03;            // Enable INT1 & INT0
 142:	89 b7       	in	r24, 0x39	; 57
 144:	83 60       	ori	r24, 0x03	; 3
 146:	89 bf       	out	0x39, r24	; 57

	 // Enable global interrupt system
	 //SREG = 0x80;            // Of direct via SREG of via wrapper
	 sei();
 148:	78 94       	sei
	
	while (1==1) {
		switch (currentIndex){
 14a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 152:	e0 31       	cpi	r30, 0x10	; 16
 154:	f1 05       	cpc	r31, r1
 156:	98 f5       	brcc	.+102    	; 0x1be <main+0x8a>
 158:	ea 5b       	subi	r30, 0xBA	; 186
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	33 c0       	rjmp	.+102    	; 0x1c4 <__tablejump2__>
			case 0:  PORTC = ZERO; break;
 15e:	8f eb       	ldi	r24, 0xBF	; 191
 160:	85 bb       	out	0x15, r24	; 21
 162:	f3 cf       	rjmp	.-26     	; 0x14a <main+0x16>
			case 1:  PORTC = ONE; break;
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	85 bb       	out	0x15, r24	; 21
 168:	f0 cf       	rjmp	.-32     	; 0x14a <main+0x16>
			case 2:  PORTC = TWO; break;
 16a:	8b e5       	ldi	r24, 0x5B	; 91
 16c:	85 bb       	out	0x15, r24	; 21
 16e:	ed cf       	rjmp	.-38     	; 0x14a <main+0x16>
			case 3:  PORTC = THREE; break;
 170:	8f e4       	ldi	r24, 0x4F	; 79
 172:	85 bb       	out	0x15, r24	; 21
 174:	ea cf       	rjmp	.-44     	; 0x14a <main+0x16>
			case 4:  PORTC = FOUR; break;
 176:	86 e6       	ldi	r24, 0x66	; 102
 178:	85 bb       	out	0x15, r24	; 21
 17a:	e7 cf       	rjmp	.-50     	; 0x14a <main+0x16>
			case 5:  PORTC = FIVE; break;
 17c:	8d e6       	ldi	r24, 0x6D	; 109
 17e:	85 bb       	out	0x15, r24	; 21
 180:	e4 cf       	rjmp	.-56     	; 0x14a <main+0x16>
			case 6:  PORTC = SIX; break;
 182:	8d e7       	ldi	r24, 0x7D	; 125
 184:	85 bb       	out	0x15, r24	; 21
 186:	e1 cf       	rjmp	.-62     	; 0x14a <main+0x16>
			case 7:  PORTC = SEVEN; break;
 188:	87 e0       	ldi	r24, 0x07	; 7
 18a:	85 bb       	out	0x15, r24	; 21
 18c:	de cf       	rjmp	.-68     	; 0x14a <main+0x16>
			case 8:  PORTC = EIGHT; break;
 18e:	8f e7       	ldi	r24, 0x7F	; 127
 190:	85 bb       	out	0x15, r24	; 21
 192:	db cf       	rjmp	.-74     	; 0x14a <main+0x16>
			case 9:  PORTC = NINE; break;
 194:	8f e6       	ldi	r24, 0x6F	; 111
 196:	85 bb       	out	0x15, r24	; 21
 198:	d8 cf       	rjmp	.-80     	; 0x14a <main+0x16>
			case 10: PORTC = A; break;
 19a:	87 e7       	ldi	r24, 0x77	; 119
 19c:	85 bb       	out	0x15, r24	; 21
 19e:	d5 cf       	rjmp	.-86     	; 0x14a <main+0x16>
			case 11: PORTC = B; break;
 1a0:	8c e7       	ldi	r24, 0x7C	; 124
 1a2:	85 bb       	out	0x15, r24	; 21
 1a4:	d2 cf       	rjmp	.-92     	; 0x14a <main+0x16>
			case 12: PORTC = C; break;
 1a6:	89 e3       	ldi	r24, 0x39	; 57
 1a8:	85 bb       	out	0x15, r24	; 21
 1aa:	cf cf       	rjmp	.-98     	; 0x14a <main+0x16>
			case 13: PORTC = D; break;
 1ac:	8e e5       	ldi	r24, 0x5E	; 94
 1ae:	85 bb       	out	0x15, r24	; 21
 1b0:	cc cf       	rjmp	.-104    	; 0x14a <main+0x16>
			case 14: PORTC = E; break;
 1b2:	89 e7       	ldi	r24, 0x79	; 121
 1b4:	85 bb       	out	0x15, r24	; 21
 1b6:	c9 cf       	rjmp	.-110    	; 0x14a <main+0x16>
			case 15: PORTC = F; break;
 1b8:	81 e7       	ldi	r24, 0x71	; 113
 1ba:	85 bb       	out	0x15, r24	; 21
 1bc:	c6 cf       	rjmp	.-116    	; 0x14a <main+0x16>
			default: PORTC = E; break;
 1be:	89 e7       	ldi	r24, 0x79	; 121
 1c0:	85 bb       	out	0x15, r24	; 21
 1c2:	c3 cf       	rjmp	.-122    	; 0x14a <main+0x16>

000001c4 <__tablejump2__>:
 1c4:	ee 0f       	add	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	00 24       	eor	r0, r0
 1ca:	00 1c       	adc	r0, r0
 1cc:	0b be       	out	0x3b, r0	; 59
 1ce:	07 90       	elpm	r0, Z+
 1d0:	f6 91       	elpm	r31, Z
 1d2:	e0 2d       	mov	r30, r0
 1d4:	09 94       	ijmp

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
