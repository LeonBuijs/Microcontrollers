
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000bca  00000c7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bca  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800118  00800118  00000c96  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  00000c96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00000c97  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cf4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000158  00000000  00000000  00000d30  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001300  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c08  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b0a  00000000  00000000  00002d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002e4  00000000  00000000  0000389c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000696  00000000  00000000  00003b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000006ab  00000000  00000000  00004216  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e8  00000000  00000000  000048c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	d2 c1       	rjmp	.+932    	; 0x3aa <__vector_1>
   6:	00 00       	nop
   8:	1b c2       	rjmp	.+1078   	; 0x440 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ec       	ldi	r30, 0xCA	; 202
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 31       	cpi	r26, 0x1D	; 29
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	08 d2       	rcall	.+1040   	; 0x4d4 <main>
  c4:	80 c5       	rjmp	.+2816   	; 0xbc6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <lcd_strobe_lcd_e>:
outputs:
notes:			According datasheet HD44780
Version :    	DMK, Initial code
*******************************************************************/
void lcd_strobe_lcd_e(void) {
	PORTC |= (1<<LCD_E);	// E high
  c8:	85 b3       	in	r24, 0x15	; 21
  ca:	88 60       	ori	r24, 0x08	; 8
  cc:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f ec       	ldi	r24, 0xCF	; 207
  d0:	97 e0       	ldi	r25, 0x07	; 7
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcd_strobe_lcd_e+0xa>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <lcd_strobe_lcd_e+0x10>
  d8:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTC &= ~(1<<LCD_E);  	// E low
  da:	85 b3       	in	r24, 0x15	; 21
  dc:	87 7f       	andi	r24, 0xF7	; 247
  de:	85 bb       	out	0x15, r24	; 21
  e0:	8f ec       	ldi	r24, 0xCF	; 207
  e2:	97 e0       	ldi	r25, 0x07	; 7
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <lcd_strobe_lcd_e+0x1c>
  e8:	00 c0       	rjmp	.+0      	; 0xea <lcd_strobe_lcd_e+0x22>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <init_4bits_mode>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void init_4bits_mode(void) {
  ee:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  f4:	15 ba       	out	0x15, r1	; 21

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
  f6:	c0 e2       	ldi	r28, 0x20	; 32
  f8:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
  fa:	e6 df       	rcall	.-52     	; 0xc8 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
	lcd_strobe_lcd_e();
  fc:	c5 bb       	out	0x15, r28	; 21
  fe:	e4 df       	rcall	.-56     	; 0xc8 <lcd_strobe_lcd_e>
	PORTC = 0x80;
 100:	80 e8       	ldi	r24, 0x80	; 128
	lcd_strobe_lcd_e();
 102:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 104:	e1 df       	rcall	.-62     	; 0xc8 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 106:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
 108:	df df       	rcall	.-66     	; 0xc8 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 10a:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 10c:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 10e:	dc df       	rcall	.-72     	; 0xc8 <lcd_strobe_lcd_e>
 110:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x60;
 112:	da df       	rcall	.-76     	; 0xc8 <lcd_strobe_lcd_e>
 114:	80 e6       	ldi	r24, 0x60	; 96
	lcd_strobe_lcd_e();
 116:	85 bb       	out	0x15, r24	; 21
 118:	d7 df       	rcall	.-82     	; 0xc8 <lcd_strobe_lcd_e>

}
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <lcd_write_data>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_data(unsigned char byte) {
 11e:	cf 93       	push	r28
 120:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 122:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 124:	85 b3       	in	r24, 0x15	; 21
 126:	84 60       	ori	r24, 0x04	; 4
 128:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 12a:	ce df       	rcall	.-100    	; 0xc8 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 12c:	c2 95       	swap	r28
 12e:	c0 7f       	andi	r28, 0xF0	; 240
 130:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
 132:	85 b3       	in	r24, 0x15	; 21
 134:	84 60       	ori	r24, 0x04	; 4
	lcd_strobe_lcd_e();
 136:	85 bb       	out	0x15, r24	; 21
 138:	c7 df       	rcall	.-114    	; 0xc8 <lcd_strobe_lcd_e>
}
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <lcd_write_string>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_string(char *str) {
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 144:	02 c0       	rjmp	.+4      	; 0x14a <lcd_write_string+0xc>
		lcd_write_data(*str);
 146:	eb df       	rcall	.-42     	; 0x11e <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 148:	21 96       	adiw	r28, 0x01	; 1
 14a:	88 81       	ld	r24, Y
 14c:	81 11       	cpse	r24, r1
 14e:	fb cf       	rjmp	.-10     	; 0x146 <lcd_write_string+0x8>
		lcd_write_data(*str);
	}
}
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <lcd_write_command>:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_command(unsigned char byte)

{
 156:	cf 93       	push	r28
 158:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 15a:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<LCD_RS);
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	8b 7f       	andi	r24, 0xFB	; 251
 160:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 162:	b2 df       	rcall	.-156    	; 0xc8 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 164:	c2 95       	swap	r28
 166:	c0 7f       	andi	r28, 0xF0	; 240
 168:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1<<LCD_RS);
 16a:	85 b3       	in	r24, 0x15	; 21
 16c:	8b 7f       	andi	r24, 0xFB	; 251
	lcd_strobe_lcd_e();
 16e:	85 bb       	out	0x15, r24	; 21
 170:	ab df       	rcall	.-170    	; 0xc8 <lcd_strobe_lcd_e>
}
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <lcd_clear>:

void lcd_clear(void) {
	lcd_write_command(0x01); // Clear display command
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	ee df       	rcall	.-36     	; 0x156 <lcd_write_command>
 17a:	8f e9       	ldi	r24, 0x9F	; 159
 17c:	9f e0       	ldi	r25, 0x0F	; 15
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_clear+0x8>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_clear+0xe>
 184:	00 00       	nop
 186:	08 95       	ret

00000188 <spi_masterInit>:
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	87 bb       	out	0x17, r24	; 23
 18c:	87 b3       	in	r24, 0x17	; 23
 18e:	87 7f       	andi	r24, 0xF7	; 247
 190:	87 bb       	out	0x17, r24	; 23
 192:	88 b3       	in	r24, 0x18	; 24
 194:	81 60       	ori	r24, 0x01	; 1
 196:	88 bb       	out	0x18, r24	; 24
 198:	82 e5       	ldi	r24, 0x52	; 82
 19a:	8d b9       	out	0x0d, r24	; 13
 19c:	08 95       	ret

0000019e <spi_write>:
 19e:	8f b9       	out	0x0f, r24	; 15
 1a0:	77 9b       	sbis	0x0e, 7	; 14
 1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <spi_write+0x2>
 1a4:	08 95       	ret

000001a6 <spi_slaveSelect>:
 1a6:	88 b3       	in	r24, 0x18	; 24
 1a8:	8e 7f       	andi	r24, 0xFE	; 254
 1aa:	88 bb       	out	0x18, r24	; 24
 1ac:	08 95       	ret

000001ae <spi_slaveDeSelect>:
 1ae:	88 b3       	in	r24, 0x18	; 24
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	88 bb       	out	0x18, r24	; 24
 1b4:	08 95       	ret

000001b6 <spi_writeWord>:
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	d8 2f       	mov	r29, r24
 1bc:	c6 2f       	mov	r28, r22
 1be:	f3 df       	rcall	.-26     	; 0x1a6 <spi_slaveSelect>
 1c0:	8d 2f       	mov	r24, r29
 1c2:	ed df       	rcall	.-38     	; 0x19e <spi_write>
 1c4:	8c 2f       	mov	r24, r28
 1c6:	eb df       	rcall	.-42     	; 0x19e <spi_write>
 1c8:	f2 df       	rcall	.-28     	; 0x1ae <spi_slaveDeSelect>
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <displayDriverInit>:
 1d0:	6f ef       	ldi	r22, 0xFF	; 255
 1d2:	89 e0       	ldi	r24, 0x09	; 9
 1d4:	f0 df       	rcall	.-32     	; 0x1b6 <spi_writeWord>
 1d6:	6f e0       	ldi	r22, 0x0F	; 15
 1d8:	8a e0       	ldi	r24, 0x0A	; 10
 1da:	ed df       	rcall	.-38     	; 0x1b6 <spi_writeWord>
 1dc:	63 e0       	ldi	r22, 0x03	; 3
 1de:	8b e0       	ldi	r24, 0x0B	; 11
 1e0:	ea df       	rcall	.-44     	; 0x1b6 <spi_writeWord>
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	8c e0       	ldi	r24, 0x0C	; 12
 1e6:	e7 cf       	rjmp	.-50     	; 0x1b6 <spi_writeWord>
 1e8:	08 95       	ret

000001ea <writeLedDisplay>:
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
 1fa:	28 97       	sbiw	r28, 0x08	; 8
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	f8 94       	cli
 200:	de bf       	out	0x3e, r29	; 62
 202:	0f be       	out	0x3f, r0	; 63
 204:	cd bf       	out	0x3d, r28	; 61
 206:	99 23       	and	r25, r25
 208:	3c f4       	brge	.+14     	; 0x218 <writeLedDisplay+0x2e>
 20a:	91 95       	neg	r25
 20c:	81 95       	neg	r24
 20e:	91 09       	sbc	r25, r1
 210:	ee 24       	eor	r14, r14
 212:	e3 94       	inc	r14
 214:	f1 2c       	mov	r15, r1
 216:	02 c0       	rjmp	.+4      	; 0x21c <writeLedDisplay+0x32>
 218:	e1 2c       	mov	r14, r1
 21a:	f1 2c       	mov	r15, r1
 21c:	fe 01       	movw	r30, r28
 21e:	31 96       	adiw	r30, 0x01	; 1
 220:	28 e0       	ldi	r18, 0x08	; 8
 222:	df 01       	movw	r26, r30
 224:	1d 92       	st	X+, r1
 226:	2a 95       	dec	r18
 228:	e9 f7       	brne	.-6      	; 0x224 <writeLedDisplay+0x3a>
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	89 01       	movw	r16, r18
 230:	0f 5f       	subi	r16, 0xFF	; 255
 232:	1f 4f       	sbci	r17, 0xFF	; 255
 234:	6a e0       	ldi	r22, 0x0A	; 10
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	ab d1       	rcall	.+854    	; 0x590 <__divmodhi4>
 23a:	22 0f       	add	r18, r18
 23c:	33 1f       	adc	r19, r19
 23e:	e1 e0       	ldi	r30, 0x01	; 1
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	ec 0f       	add	r30, r28
 244:	fd 1f       	adc	r31, r29
 246:	e2 0f       	add	r30, r18
 248:	f3 1f       	adc	r31, r19
 24a:	91 83       	std	Z+1, r25	; 0x01
 24c:	80 83       	st	Z, r24
 24e:	86 2f       	mov	r24, r22
 250:	97 2f       	mov	r25, r23
 252:	18 16       	cp	r1, r24
 254:	19 06       	cpc	r1, r25
 256:	24 f4       	brge	.+8      	; 0x260 <writeLedDisplay+0x76>
 258:	98 01       	movw	r18, r16
 25a:	03 30       	cpi	r16, 0x03	; 3
 25c:	11 05       	cpc	r17, r1
 25e:	3c f3       	brlt	.-50     	; 0x22e <writeLedDisplay+0x44>
 260:	ef 28       	or	r14, r15
 262:	61 f0       	breq	.+24     	; 0x27c <writeLedDisplay+0x92>
 264:	00 0f       	add	r16, r16
 266:	11 1f       	adc	r17, r17
 268:	e1 e0       	ldi	r30, 0x01	; 1
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	ec 0f       	add	r30, r28
 26e:	fd 1f       	adc	r31, r29
 270:	e0 0f       	add	r30, r16
 272:	f1 1f       	adc	r31, r17
 274:	8a e0       	ldi	r24, 0x0A	; 10
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	91 83       	std	Z+1, r25	; 0x01
 27a:	80 83       	st	Z, r24
 27c:	00 e0       	ldi	r16, 0x00	; 0
 27e:	10 e0       	ldi	r17, 0x00	; 0
 280:	0f c0       	rjmp	.+30     	; 0x2a0 <writeLedDisplay+0xb6>
 282:	f8 01       	movw	r30, r16
 284:	ee 0f       	add	r30, r30
 286:	ff 1f       	adc	r31, r31
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	8c 0f       	add	r24, r28
 28e:	9d 1f       	adc	r25, r29
 290:	e8 0f       	add	r30, r24
 292:	f9 1f       	adc	r31, r25
 294:	60 81       	ld	r22, Z
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 0f       	add	r24, r16
 29a:	8d df       	rcall	.-230    	; 0x1b6 <spi_writeWord>
 29c:	0f 5f       	subi	r16, 0xFF	; 255
 29e:	1f 4f       	sbci	r17, 0xFF	; 255
 2a0:	04 30       	cpi	r16, 0x04	; 4
 2a2:	11 05       	cpc	r17, r1
 2a4:	74 f3       	brlt	.-36     	; 0x282 <writeLedDisplay+0x98>
 2a6:	28 96       	adiw	r28, 0x08	; 8
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	f8 94       	cli
 2ac:	de bf       	out	0x3e, r29	; 62
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	cd bf       	out	0x3d, r28	; 61
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	1f 91       	pop	r17
 2b8:	0f 91       	pop	r16
 2ba:	ff 90       	pop	r15
 2bc:	ef 90       	pop	r14
 2be:	08 95       	ret

000002c0 <segment_init>:
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	87 bb       	out	0x17, r24	; 23
 2c4:	61 df       	rcall	.-318    	; 0x188 <spi_masterInit>
 2c6:	84 cf       	rjmp	.-248    	; 0x1d0 <displayDriverInit>
 2c8:	08 95       	ret

000002ca <saveTriggerTemp>:
volatile uint8_t button_pressed = 0;  // Voor debounce

uint8_t EEMEM storedTriggerTemp = 26;  // Trigger temp opslaan in EEPROM

void saveTriggerTemp(uint8_t value) {
	eeprom_update_byte(&storedTriggerTemp, value);
 2ca:	68 2f       	mov	r22, r24
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	69 c4       	rjmp	.+2258   	; 0xba4 <eeprom_update_byte>
 2d2:	08 95       	ret

000002d4 <readTriggerTemp>:
}

uint8_t readTriggerTemp() {
	return eeprom_read_byte(&storedTriggerTemp);
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	5d c4       	rjmp	.+2234   	; 0xb94 <eeprom_read_byte>
}
 2da:	08 95       	ret

000002dc <wait>:

void wait(int ms)
{
	for (int tms = 0; tms < ms; tms++)
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	08 c0       	rjmp	.+16     	; 0x2f2 <wait+0x16>
 2e2:	ef ec       	ldi	r30, 0xCF	; 207
 2e4:	f7 e0       	ldi	r31, 0x07	; 7
 2e6:	31 97       	sbiw	r30, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <wait+0xa>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <wait+0x10>
 2ec:	00 00       	nop
 2ee:	2f 5f       	subi	r18, 0xFF	; 255
 2f0:	3f 4f       	sbci	r19, 0xFF	; 255
 2f2:	28 17       	cp	r18, r24
 2f4:	39 07       	cpc	r19, r25
 2f6:	ac f3       	brlt	.-22     	; 0x2e2 <wait+0x6>
	{
		_delay_ms(1);
	}
}
 2f8:	08 95       	ret

000002fa <adcInit>:

void adcInit(void)
{
	ADMUX = 0b11100011; // AREF = VCC, left-adjusted, kanaal 3 (PF3)
 2fa:	83 ee       	ldi	r24, 0xE3	; 227
 2fc:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000110; // ADC-enable, geen interrupt, geen free-running, prescaler 64
 2fe:	86 e8       	ldi	r24, 0x86	; 134
 300:	86 b9       	out	0x06, r24	; 6
 302:	08 95       	ret

00000304 <adcRead>:
}

uint8_t adcRead()
{
	ADCSRA |= BIT(6); // Start conversie
 304:	86 b1       	in	r24, 0x06	; 6
 306:	80 64       	ori	r24, 0x40	; 64
 308:	86 b9       	out	0x06, r24	; 6
	while (ADCSRA & BIT(6)); // Wachten tot conversie klaar is
 30a:	36 99       	sbic	0x06, 6	; 6
 30c:	fe cf       	rjmp	.-4      	; 0x30a <adcRead+0x6>
	return ADCH; // Alleen de hoogste 8 bits gebruiken
 30e:	85 b1       	in	r24, 0x05	; 5
}
 310:	08 95       	ret

00000312 <print_temperature_lcd>:

void print_temperature_lcd(int temperature, int trigger_temp) {
 312:	ef 92       	push	r14
 314:	ff 92       	push	r15
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	cd b7       	in	r28, 0x3d	; 61
 320:	de b7       	in	r29, 0x3e	; 62
 322:	ec 97       	sbiw	r28, 0x3c	; 60
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	f8 94       	cli
 328:	de bf       	out	0x3e, r29	; 62
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	cd bf       	out	0x3d, r28	; 61
 32e:	18 2f       	mov	r17, r24
 330:	09 2f       	mov	r16, r25
 332:	f6 2e       	mov	r15, r22
 334:	e7 2e       	mov	r14, r23
	lcd_clear();
 336:	1f df       	rcall	.-450    	; 0x176 <lcd_clear>
	char tempString[30];
	sprintf(tempString, "Temp: %dC", temperature);
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	9f 93       	push	r25
 342:	8f 93       	push	r24
 344:	8e 01       	movw	r16, r28
 346:	0f 5f       	subi	r16, 0xFF	; 255
 348:	1f 4f       	sbci	r17, 0xFF	; 255
 34a:	1f 93       	push	r17
 34c:	0f 93       	push	r16
 34e:	47 d1       	rcall	.+654    	; 0x5de <sprintf>
	lcd_write_string(tempString);
 350:	c8 01       	movw	r24, r16
 352:	f5 de       	rcall	.-534    	; 0x13e <lcd_write_string>
	lcd_write_command(0xC0); // Ga naar tweede regel
 354:	80 ec       	ldi	r24, 0xC0	; 192
 356:	ff de       	rcall	.-514    	; 0x156 <lcd_write_command>
 358:	ef 92       	push	r14
	char triggerString[30];
	sprintf(triggerString, "Trigger: %dC", trigger_temp);
 35a:	ff 92       	push	r15
 35c:	8a e0       	ldi	r24, 0x0A	; 10
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	9f 93       	push	r25
 362:	8f 93       	push	r24
 364:	02 5e       	subi	r16, 0xE2	; 226
 366:	1f 4f       	sbci	r17, 0xFF	; 255
 368:	1f 93       	push	r17
 36a:	0f 93       	push	r16
 36c:	38 d1       	rcall	.+624    	; 0x5de <sprintf>
	lcd_write_string(triggerString);
 36e:	c8 01       	movw	r24, r16
 370:	e6 de       	rcall	.-564    	; 0x13e <lcd_write_string>
 372:	0f b6       	in	r0, 0x3f	; 63
}
 374:	f8 94       	cli
 376:	de bf       	out	0x3e, r29	; 62
 378:	0f be       	out	0x3f, r0	; 63
 37a:	cd bf       	out	0x3d, r28	; 61
 37c:	ec 96       	adiw	r28, 0x3c	; 60
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	f8 94       	cli
 382:	de bf       	out	0x3e, r29	; 62
 384:	0f be       	out	0x3f, r0	; 63
 386:	cd bf       	out	0x3d, r28	; 61
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	ff 90       	pop	r15
 392:	ef 90       	pop	r14
 394:	08 95       	ret

00000396 <initInterrupts>:
 396:	ea e6       	ldi	r30, 0x6A	; 106

void initInterrupts() {
	EICRA |= (1 << ISC11) | (1 << ISC01); // Interrupt op vallende flank (falling edge)
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	8a 60       	ori	r24, 0x0A	; 10
 39e:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0) | (1 << INT1); // Enable INT0 (PD2) en INT1 (PD3)
 3a0:	89 b7       	in	r24, 0x39	; 57
 3a2:	83 60       	ori	r24, 0x03	; 3
 3a4:	89 bf       	out	0x39, r24	; 57
	sei(); // Globale interrupts inschakelen
 3a6:	78 94       	sei
 3a8:	08 95       	ret

000003aa <__vector_1>:
}

ISR(INT0_vect) { // PD2 - trigger verlagen
 3aa:	1f 92       	push	r1
 3ac:	0f 92       	push	r0
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	0f 92       	push	r0
 3b2:	11 24       	eor	r1, r1
 3b4:	0b b6       	in	r0, 0x3b	; 59
 3b6:	0f 92       	push	r0
 3b8:	2f 93       	push	r18
 3ba:	3f 93       	push	r19
 3bc:	4f 93       	push	r20
 3be:	5f 93       	push	r21
 3c0:	6f 93       	push	r22
 3c2:	7f 93       	push	r23
 3c4:	8f 93       	push	r24
 3c6:	9f 93       	push	r25
 3c8:	af 93       	push	r26
 3ca:	bf 93       	push	r27
 3cc:	ef 93       	push	r30
 3ce:	ff 93       	push	r31
	if (!button_pressed) {
 3d0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 3d4:	81 11       	cpse	r24, r1
 3d6:	21 c0       	rjmp	.+66     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		button_pressed = 1;
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
		if (trigger_temperature > 0) {
 3de:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <trigger_temperature>
 3e2:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <trigger_temperature+0x1>
 3e6:	18 16       	cp	r1, r24
 3e8:	19 06       	cpc	r1, r25
 3ea:	bc f4       	brge	.+46     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
			trigger_temperature--;
 3ec:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <trigger_temperature>
 3f0:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <trigger_temperature+0x1>
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <trigger_temperature+0x1>
 3fa:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <trigger_temperature>
			saveTriggerTemp(trigger_temperature);  // Opslaan in EEPROM
 3fe:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <trigger_temperature>
 402:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <trigger_temperature+0x1>
 406:	61 df       	rcall	.-318    	; 0x2ca <saveTriggerTemp>
			print_temperature_lcd(temperature, trigger_temperature);
 408:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <trigger_temperature>
 40c:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <trigger_temperature+0x1>
 410:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <temperature>
 414:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <temperature+0x1>
 418:	7c df       	rcall	.-264    	; 0x312 <print_temperature_lcd>
		}
	}
}
 41a:	ff 91       	pop	r31
 41c:	ef 91       	pop	r30
 41e:	bf 91       	pop	r27
 420:	af 91       	pop	r26
 422:	9f 91       	pop	r25
 424:	8f 91       	pop	r24
 426:	7f 91       	pop	r23
 428:	6f 91       	pop	r22
 42a:	5f 91       	pop	r21
 42c:	4f 91       	pop	r20
 42e:	3f 91       	pop	r19
 430:	2f 91       	pop	r18
 432:	0f 90       	pop	r0
 434:	0b be       	out	0x3b, r0	; 59
 436:	0f 90       	pop	r0
 438:	0f be       	out	0x3f, r0	; 63
 43a:	0f 90       	pop	r0
 43c:	1f 90       	pop	r1
 43e:	18 95       	reti

00000440 <__vector_2>:

ISR(INT1_vect) { // PD3 - trigger verhogen
 440:	1f 92       	push	r1
 442:	0f 92       	push	r0
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	0f 92       	push	r0
 448:	11 24       	eor	r1, r1
 44a:	0b b6       	in	r0, 0x3b	; 59
 44c:	0f 92       	push	r0
 44e:	2f 93       	push	r18
 450:	3f 93       	push	r19
 452:	4f 93       	push	r20
 454:	5f 93       	push	r21
 456:	6f 93       	push	r22
 458:	7f 93       	push	r23
 45a:	8f 93       	push	r24
 45c:	9f 93       	push	r25
 45e:	af 93       	push	r26
 460:	bf 93       	push	r27
 462:	ef 93       	push	r30
 464:	ff 93       	push	r31
	if (!button_pressed) {
 466:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 46a:	81 11       	cpse	r24, r1
 46c:	20 c0       	rjmp	.+64     	; 0x4ae <__vector_2+0x6e>
		button_pressed = 1;
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
		if (trigger_temperature < 50) {
 474:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <trigger_temperature>
 478:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <trigger_temperature+0x1>
 47c:	c2 97       	sbiw	r24, 0x32	; 50
 47e:	bc f4       	brge	.+46     	; 0x4ae <__vector_2+0x6e>
			trigger_temperature++;
 480:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <trigger_temperature>
 484:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <trigger_temperature+0x1>
 488:	01 96       	adiw	r24, 0x01	; 1
 48a:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <trigger_temperature+0x1>
 48e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <trigger_temperature>
			saveTriggerTemp(trigger_temperature);  // Opslaan in EEPROM
 492:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <trigger_temperature>
 496:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <trigger_temperature+0x1>
 49a:	17 df       	rcall	.-466    	; 0x2ca <saveTriggerTemp>
			print_temperature_lcd(temperature, trigger_temperature);
 49c:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <trigger_temperature>
 4a0:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <trigger_temperature+0x1>
 4a4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <temperature>
 4a8:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <temperature+0x1>
 4ac:	32 df       	rcall	.-412    	; 0x312 <print_temperature_lcd>
		}
	}
}
 4ae:	ff 91       	pop	r31
 4b0:	ef 91       	pop	r30
 4b2:	bf 91       	pop	r27
 4b4:	af 91       	pop	r26
 4b6:	9f 91       	pop	r25
 4b8:	8f 91       	pop	r24
 4ba:	7f 91       	pop	r23
 4bc:	6f 91       	pop	r22
 4be:	5f 91       	pop	r21
 4c0:	4f 91       	pop	r20
 4c2:	3f 91       	pop	r19
 4c4:	2f 91       	pop	r18
 4c6:	0f 90       	pop	r0
 4c8:	0b be       	out	0x3b, r0	; 59
 4ca:	0f 90       	pop	r0
 4cc:	0f be       	out	0x3f, r0	; 63
 4ce:	0f 90       	pop	r0
 4d0:	1f 90       	pop	r1
 4d2:	18 95       	reti

000004d4 <main>:

int main(void)
{
	DDRF = 0x00; // PORTF als input (ADC)
 4d4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRA = 0xFF; // PORTA als output
 4d8:	8f ef       	ldi	r24, 0xFF	; 255
 4da:	8a bb       	out	0x1a, r24	; 26
	DDRG |= (1 << PG0); // PG0 als output
 4dc:	e4 e6       	ldi	r30, 0x64	; 100
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	80 81       	ld	r24, Z
 4e2:	81 60       	ori	r24, 0x01	; 1
 4e4:	80 83       	st	Z, r24
	
	DDRD &= ~((1 << PD2) | (1 << PD3)); // PD2 en PD3 als input
 4e6:	81 b3       	in	r24, 0x11	; 17
 4e8:	83 7f       	andi	r24, 0xF3	; 243
 4ea:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1 << PD2) | (1 << PD3); // Pull-ups inschakelen
 4ec:	82 b3       	in	r24, 0x12	; 18
 4ee:	8c 60       	ori	r24, 0x0C	; 12
 4f0:	82 bb       	out	0x12, r24	; 18
	
	adcInit();
 4f2:	03 df       	rcall	.-506    	; 0x2fa <adcInit>
	segment_init();
 4f4:	e5 de       	rcall	.-566    	; 0x2c0 <segment_init>
	init_4bits_mode();
 4f6:	fb dd       	rcall	.-1034   	; 0xee <init_4bits_mode>
	lcd_clear();
 4f8:	3e de       	rcall	.-900    	; 0x176 <lcd_clear>
 4fa:	4d df       	rcall	.-358    	; 0x396 <initInterrupts>
	initInterrupts(); // Interrupts initialiseren
 4fc:	eb de       	rcall	.-554    	; 0x2d4 <readTriggerTemp>
 4fe:	90 e0       	ldi	r25, 0x00	; 0

	// Laad trigger temperatuur uit EEPROM
	trigger_temperature = readTriggerTemp();
 500:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <trigger_temperature+0x1>
 504:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <trigger_temperature>
 508:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <trigger_temperature>
 50c:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <trigger_temperature+0x1>
	if (trigger_temperature > 50) trigger_temperature = 26; // Standaardwaarde indien EEPROM corrupt is
 510:	c3 97       	sbiw	r24, 0x33	; 51
 512:	34 f0       	brlt	.+12     	; 0x520 <main+0x4c>
 514:	8a e1       	ldi	r24, 0x1A	; 26
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <trigger_temperature+0x1>
 51c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <trigger_temperature>
 520:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <trigger_temperature>
 524:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <trigger_temperature+0x1>

	print_temperature_lcd(temperature, trigger_temperature);
 528:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <temperature>
 52c:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <temperature+0x1>
 530:	f0 de       	rcall	.-544    	; 0x312 <print_temperature_lcd>
 532:	84 e6       	ldi	r24, 0x64	; 100
 534:	90 e0       	ldi	r25, 0x00	; 0

	while (1)
	{
		wait(100);   // Wachten op aanvraag (polling)
 536:	d2 de       	rcall	.-604    	; 0x2dc <wait>
 538:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
		
		// Debounce resetten
		button_pressed = 0;
 53c:	e3 de       	rcall	.-570    	; 0x304 <adcRead>
 53e:	8b bb       	out	0x1b, r24	; 27

		uint8_t adc_value = adcRead(); // Lees ADC
 540:	c8 2f       	mov	r28, r24
 542:	d0 e0       	ldi	r29, 0x00	; 0
		PORTA = adc_value; // Zet waarde op PORTA
 544:	ce 01       	movw	r24, r28
		writeLedDisplay(adc_value);
 546:	51 de       	rcall	.-862    	; 0x1ea <writeLedDisplay>
 548:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <temperature>
 54c:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <temperature+0x1>
		
		if (adc_value != temperature)
 550:	c8 17       	cp	r28, r24
 552:	d9 07       	cpc	r29, r25
 554:	51 f0       	breq	.+20     	; 0x56a <main+0x96>
 556:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <trigger_temperature>
 55a:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <trigger_temperature+0x1>
		{
			print_temperature_lcd(adc_value, trigger_temperature);
 55e:	ce 01       	movw	r24, r28
 560:	d8 de       	rcall	.-592    	; 0x312 <print_temperature_lcd>
 562:	d0 93 1a 01 	sts	0x011A, r29	; 0x80011a <temperature+0x1>
 566:	c0 93 19 01 	sts	0x0119, r28	; 0x800119 <temperature>
			temperature = adc_value;
 56a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <trigger_temperature>
 56e:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <trigger_temperature+0x1>
		}
		
		if (adc_value >= trigger_temperature){
 572:	c8 17       	cp	r28, r24
 574:	d9 07       	cpc	r29, r25
 576:	34 f0       	brlt	.+12     	; 0x584 <main+0xb0>
 578:	e5 e6       	ldi	r30, 0x65	; 101
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	80 81       	ld	r24, Z
 57e:	81 60       	ori	r24, 0x01	; 1
			PORTG |= (1 << PG0);
 580:	80 83       	st	Z, r24
 582:	d7 cf       	rjmp	.-82     	; 0x532 <main+0x5e>
 584:	e5 e6       	ldi	r30, 0x65	; 101
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	80 81       	ld	r24, Z
 58a:	8e 7f       	andi	r24, 0xFE	; 254
			} else {
			PORTG &= ~(1 << PG0);
 58c:	80 83       	st	Z, r24
 58e:	d1 cf       	rjmp	.-94     	; 0x532 <main+0x5e>

00000590 <__divmodhi4>:
 590:	97 fb       	bst	r25, 7
 592:	07 2e       	mov	r0, r23
 594:	16 f4       	brtc	.+4      	; 0x59a <__divmodhi4+0xa>
 596:	00 94       	com	r0
 598:	06 d0       	rcall	.+12     	; 0x5a6 <__divmodhi4_neg1>
 59a:	77 fd       	sbrc	r23, 7
 59c:	08 d0       	rcall	.+16     	; 0x5ae <__divmodhi4_neg2>
 59e:	0b d0       	rcall	.+22     	; 0x5b6 <__udivmodhi4>
 5a0:	07 fc       	sbrc	r0, 7
 5a2:	05 d0       	rcall	.+10     	; 0x5ae <__divmodhi4_neg2>
 5a4:	3e f4       	brtc	.+14     	; 0x5b4 <__divmodhi4_exit>

000005a6 <__divmodhi4_neg1>:
 5a6:	90 95       	com	r25
 5a8:	81 95       	neg	r24
 5aa:	9f 4f       	sbci	r25, 0xFF	; 255
 5ac:	08 95       	ret

000005ae <__divmodhi4_neg2>:
 5ae:	70 95       	com	r23
 5b0:	61 95       	neg	r22
 5b2:	7f 4f       	sbci	r23, 0xFF	; 255

000005b4 <__divmodhi4_exit>:
 5b4:	08 95       	ret

000005b6 <__udivmodhi4>:
 5b6:	aa 1b       	sub	r26, r26
 5b8:	bb 1b       	sub	r27, r27
 5ba:	51 e1       	ldi	r21, 0x11	; 17
 5bc:	07 c0       	rjmp	.+14     	; 0x5cc <__udivmodhi4_ep>

000005be <__udivmodhi4_loop>:
 5be:	aa 1f       	adc	r26, r26
 5c0:	bb 1f       	adc	r27, r27
 5c2:	a6 17       	cp	r26, r22
 5c4:	b7 07       	cpc	r27, r23
 5c6:	10 f0       	brcs	.+4      	; 0x5cc <__udivmodhi4_ep>
 5c8:	a6 1b       	sub	r26, r22
 5ca:	b7 0b       	sbc	r27, r23

000005cc <__udivmodhi4_ep>:
 5cc:	88 1f       	adc	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	5a 95       	dec	r21
 5d2:	a9 f7       	brne	.-22     	; 0x5be <__udivmodhi4_loop>
 5d4:	80 95       	com	r24
 5d6:	90 95       	com	r25
 5d8:	bc 01       	movw	r22, r24
 5da:	cd 01       	movw	r24, r26
 5dc:	08 95       	ret

000005de <sprintf>:
 5de:	0f 93       	push	r16
 5e0:	1f 93       	push	r17
 5e2:	cf 93       	push	r28
 5e4:	df 93       	push	r29
 5e6:	cd b7       	in	r28, 0x3d	; 61
 5e8:	de b7       	in	r29, 0x3e	; 62
 5ea:	2e 97       	sbiw	r28, 0x0e	; 14
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	f8 94       	cli
 5f0:	de bf       	out	0x3e, r29	; 62
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	cd bf       	out	0x3d, r28	; 61
 5f6:	0d 89       	ldd	r16, Y+21	; 0x15
 5f8:	1e 89       	ldd	r17, Y+22	; 0x16
 5fa:	86 e0       	ldi	r24, 0x06	; 6
 5fc:	8c 83       	std	Y+4, r24	; 0x04
 5fe:	1a 83       	std	Y+2, r17	; 0x02
 600:	09 83       	std	Y+1, r16	; 0x01
 602:	8f ef       	ldi	r24, 0xFF	; 255
 604:	9f e7       	ldi	r25, 0x7F	; 127
 606:	9e 83       	std	Y+6, r25	; 0x06
 608:	8d 83       	std	Y+5, r24	; 0x05
 60a:	ae 01       	movw	r20, r28
 60c:	47 5e       	subi	r20, 0xE7	; 231
 60e:	5f 4f       	sbci	r21, 0xFF	; 255
 610:	6f 89       	ldd	r22, Y+23	; 0x17
 612:	78 8d       	ldd	r23, Y+24	; 0x18
 614:	ce 01       	movw	r24, r28
 616:	01 96       	adiw	r24, 0x01	; 1
 618:	10 d0       	rcall	.+32     	; 0x63a <vfprintf>
 61a:	ef 81       	ldd	r30, Y+7	; 0x07
 61c:	f8 85       	ldd	r31, Y+8	; 0x08
 61e:	e0 0f       	add	r30, r16
 620:	f1 1f       	adc	r31, r17
 622:	10 82       	st	Z, r1
 624:	2e 96       	adiw	r28, 0x0e	; 14
 626:	0f b6       	in	r0, 0x3f	; 63
 628:	f8 94       	cli
 62a:	de bf       	out	0x3e, r29	; 62
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	cd bf       	out	0x3d, r28	; 61
 630:	df 91       	pop	r29
 632:	cf 91       	pop	r28
 634:	1f 91       	pop	r17
 636:	0f 91       	pop	r16
 638:	08 95       	ret

0000063a <vfprintf>:
 63a:	2f 92       	push	r2
 63c:	3f 92       	push	r3
 63e:	4f 92       	push	r4
 640:	5f 92       	push	r5
 642:	6f 92       	push	r6
 644:	7f 92       	push	r7
 646:	8f 92       	push	r8
 648:	9f 92       	push	r9
 64a:	af 92       	push	r10
 64c:	bf 92       	push	r11
 64e:	cf 92       	push	r12
 650:	df 92       	push	r13
 652:	ef 92       	push	r14
 654:	ff 92       	push	r15
 656:	0f 93       	push	r16
 658:	1f 93       	push	r17
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
 65e:	cd b7       	in	r28, 0x3d	; 61
 660:	de b7       	in	r29, 0x3e	; 62
 662:	2b 97       	sbiw	r28, 0x0b	; 11
 664:	0f b6       	in	r0, 0x3f	; 63
 666:	f8 94       	cli
 668:	de bf       	out	0x3e, r29	; 62
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	cd bf       	out	0x3d, r28	; 61
 66e:	6c 01       	movw	r12, r24
 670:	7b 01       	movw	r14, r22
 672:	8a 01       	movw	r16, r20
 674:	fc 01       	movw	r30, r24
 676:	17 82       	std	Z+7, r1	; 0x07
 678:	16 82       	std	Z+6, r1	; 0x06
 67a:	83 81       	ldd	r24, Z+3	; 0x03
 67c:	81 ff       	sbrs	r24, 1
 67e:	bf c1       	rjmp	.+894    	; 0x9fe <vfprintf+0x3c4>
 680:	ce 01       	movw	r24, r28
 682:	01 96       	adiw	r24, 0x01	; 1
 684:	3c 01       	movw	r6, r24
 686:	f6 01       	movw	r30, r12
 688:	93 81       	ldd	r25, Z+3	; 0x03
 68a:	f7 01       	movw	r30, r14
 68c:	93 fd       	sbrc	r25, 3
 68e:	85 91       	lpm	r24, Z+
 690:	93 ff       	sbrs	r25, 3
 692:	81 91       	ld	r24, Z+
 694:	7f 01       	movw	r14, r30
 696:	88 23       	and	r24, r24
 698:	09 f4       	brne	.+2      	; 0x69c <vfprintf+0x62>
 69a:	ad c1       	rjmp	.+858    	; 0x9f6 <vfprintf+0x3bc>
 69c:	85 32       	cpi	r24, 0x25	; 37
 69e:	39 f4       	brne	.+14     	; 0x6ae <vfprintf+0x74>
 6a0:	93 fd       	sbrc	r25, 3
 6a2:	85 91       	lpm	r24, Z+
 6a4:	93 ff       	sbrs	r25, 3
 6a6:	81 91       	ld	r24, Z+
 6a8:	7f 01       	movw	r14, r30
 6aa:	85 32       	cpi	r24, 0x25	; 37
 6ac:	21 f4       	brne	.+8      	; 0x6b6 <vfprintf+0x7c>
 6ae:	b6 01       	movw	r22, r12
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	d6 d1       	rcall	.+940    	; 0xa60 <fputc>
 6b4:	e8 cf       	rjmp	.-48     	; 0x686 <vfprintf+0x4c>
 6b6:	91 2c       	mov	r9, r1
 6b8:	21 2c       	mov	r2, r1
 6ba:	31 2c       	mov	r3, r1
 6bc:	ff e1       	ldi	r31, 0x1F	; 31
 6be:	f3 15       	cp	r31, r3
 6c0:	d8 f0       	brcs	.+54     	; 0x6f8 <vfprintf+0xbe>
 6c2:	8b 32       	cpi	r24, 0x2B	; 43
 6c4:	79 f0       	breq	.+30     	; 0x6e4 <vfprintf+0xaa>
 6c6:	38 f4       	brcc	.+14     	; 0x6d6 <vfprintf+0x9c>
 6c8:	80 32       	cpi	r24, 0x20	; 32
 6ca:	79 f0       	breq	.+30     	; 0x6ea <vfprintf+0xb0>
 6cc:	83 32       	cpi	r24, 0x23	; 35
 6ce:	a1 f4       	brne	.+40     	; 0x6f8 <vfprintf+0xbe>
 6d0:	23 2d       	mov	r18, r3
 6d2:	20 61       	ori	r18, 0x10	; 16
 6d4:	1d c0       	rjmp	.+58     	; 0x710 <vfprintf+0xd6>
 6d6:	8d 32       	cpi	r24, 0x2D	; 45
 6d8:	61 f0       	breq	.+24     	; 0x6f2 <vfprintf+0xb8>
 6da:	80 33       	cpi	r24, 0x30	; 48
 6dc:	69 f4       	brne	.+26     	; 0x6f8 <vfprintf+0xbe>
 6de:	23 2d       	mov	r18, r3
 6e0:	21 60       	ori	r18, 0x01	; 1
 6e2:	16 c0       	rjmp	.+44     	; 0x710 <vfprintf+0xd6>
 6e4:	83 2d       	mov	r24, r3
 6e6:	82 60       	ori	r24, 0x02	; 2
 6e8:	38 2e       	mov	r3, r24
 6ea:	e3 2d       	mov	r30, r3
 6ec:	e4 60       	ori	r30, 0x04	; 4
 6ee:	3e 2e       	mov	r3, r30
 6f0:	2a c0       	rjmp	.+84     	; 0x746 <vfprintf+0x10c>
 6f2:	f3 2d       	mov	r31, r3
 6f4:	f8 60       	ori	r31, 0x08	; 8
 6f6:	1d c0       	rjmp	.+58     	; 0x732 <vfprintf+0xf8>
 6f8:	37 fc       	sbrc	r3, 7
 6fa:	2d c0       	rjmp	.+90     	; 0x756 <vfprintf+0x11c>
 6fc:	20 ed       	ldi	r18, 0xD0	; 208
 6fe:	28 0f       	add	r18, r24
 700:	2a 30       	cpi	r18, 0x0A	; 10
 702:	40 f0       	brcs	.+16     	; 0x714 <vfprintf+0xda>
 704:	8e 32       	cpi	r24, 0x2E	; 46
 706:	b9 f4       	brne	.+46     	; 0x736 <vfprintf+0xfc>
 708:	36 fc       	sbrc	r3, 6
 70a:	75 c1       	rjmp	.+746    	; 0x9f6 <vfprintf+0x3bc>
 70c:	23 2d       	mov	r18, r3
 70e:	20 64       	ori	r18, 0x40	; 64
 710:	32 2e       	mov	r3, r18
 712:	19 c0       	rjmp	.+50     	; 0x746 <vfprintf+0x10c>
 714:	36 fe       	sbrs	r3, 6
 716:	06 c0       	rjmp	.+12     	; 0x724 <vfprintf+0xea>
 718:	8a e0       	ldi	r24, 0x0A	; 10
 71a:	98 9e       	mul	r9, r24
 71c:	20 0d       	add	r18, r0
 71e:	11 24       	eor	r1, r1
 720:	92 2e       	mov	r9, r18
 722:	11 c0       	rjmp	.+34     	; 0x746 <vfprintf+0x10c>
 724:	ea e0       	ldi	r30, 0x0A	; 10
 726:	2e 9e       	mul	r2, r30
 728:	20 0d       	add	r18, r0
 72a:	11 24       	eor	r1, r1
 72c:	22 2e       	mov	r2, r18
 72e:	f3 2d       	mov	r31, r3
 730:	f0 62       	ori	r31, 0x20	; 32
 732:	3f 2e       	mov	r3, r31
 734:	08 c0       	rjmp	.+16     	; 0x746 <vfprintf+0x10c>
 736:	8c 36       	cpi	r24, 0x6C	; 108
 738:	21 f4       	brne	.+8      	; 0x742 <vfprintf+0x108>
 73a:	83 2d       	mov	r24, r3
 73c:	80 68       	ori	r24, 0x80	; 128
 73e:	38 2e       	mov	r3, r24
 740:	02 c0       	rjmp	.+4      	; 0x746 <vfprintf+0x10c>
 742:	88 36       	cpi	r24, 0x68	; 104
 744:	41 f4       	brne	.+16     	; 0x756 <vfprintf+0x11c>
 746:	f7 01       	movw	r30, r14
 748:	93 fd       	sbrc	r25, 3
 74a:	85 91       	lpm	r24, Z+
 74c:	93 ff       	sbrs	r25, 3
 74e:	81 91       	ld	r24, Z+
 750:	7f 01       	movw	r14, r30
 752:	81 11       	cpse	r24, r1
 754:	b3 cf       	rjmp	.-154    	; 0x6bc <vfprintf+0x82>
 756:	98 2f       	mov	r25, r24
 758:	9f 7d       	andi	r25, 0xDF	; 223
 75a:	95 54       	subi	r25, 0x45	; 69
 75c:	93 30       	cpi	r25, 0x03	; 3
 75e:	28 f4       	brcc	.+10     	; 0x76a <vfprintf+0x130>
 760:	0c 5f       	subi	r16, 0xFC	; 252
 762:	1f 4f       	sbci	r17, 0xFF	; 255
 764:	9f e3       	ldi	r25, 0x3F	; 63
 766:	99 83       	std	Y+1, r25	; 0x01
 768:	0d c0       	rjmp	.+26     	; 0x784 <vfprintf+0x14a>
 76a:	83 36       	cpi	r24, 0x63	; 99
 76c:	31 f0       	breq	.+12     	; 0x77a <vfprintf+0x140>
 76e:	83 37       	cpi	r24, 0x73	; 115
 770:	71 f0       	breq	.+28     	; 0x78e <vfprintf+0x154>
 772:	83 35       	cpi	r24, 0x53	; 83
 774:	09 f0       	breq	.+2      	; 0x778 <vfprintf+0x13e>
 776:	55 c0       	rjmp	.+170    	; 0x822 <vfprintf+0x1e8>
 778:	20 c0       	rjmp	.+64     	; 0x7ba <vfprintf+0x180>
 77a:	f8 01       	movw	r30, r16
 77c:	80 81       	ld	r24, Z
 77e:	89 83       	std	Y+1, r24	; 0x01
 780:	0e 5f       	subi	r16, 0xFE	; 254
 782:	1f 4f       	sbci	r17, 0xFF	; 255
 784:	88 24       	eor	r8, r8
 786:	83 94       	inc	r8
 788:	91 2c       	mov	r9, r1
 78a:	53 01       	movw	r10, r6
 78c:	12 c0       	rjmp	.+36     	; 0x7b2 <vfprintf+0x178>
 78e:	28 01       	movw	r4, r16
 790:	f2 e0       	ldi	r31, 0x02	; 2
 792:	4f 0e       	add	r4, r31
 794:	51 1c       	adc	r5, r1
 796:	f8 01       	movw	r30, r16
 798:	a0 80       	ld	r10, Z
 79a:	b1 80       	ldd	r11, Z+1	; 0x01
 79c:	36 fe       	sbrs	r3, 6
 79e:	03 c0       	rjmp	.+6      	; 0x7a6 <vfprintf+0x16c>
 7a0:	69 2d       	mov	r22, r9
 7a2:	70 e0       	ldi	r23, 0x00	; 0
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <vfprintf+0x170>
 7a6:	6f ef       	ldi	r22, 0xFF	; 255
 7a8:	7f ef       	ldi	r23, 0xFF	; 255
 7aa:	c5 01       	movw	r24, r10
 7ac:	4e d1       	rcall	.+668    	; 0xa4a <strnlen>
 7ae:	4c 01       	movw	r8, r24
 7b0:	82 01       	movw	r16, r4
 7b2:	f3 2d       	mov	r31, r3
 7b4:	ff 77       	andi	r31, 0x7F	; 127
 7b6:	3f 2e       	mov	r3, r31
 7b8:	15 c0       	rjmp	.+42     	; 0x7e4 <vfprintf+0x1aa>
 7ba:	28 01       	movw	r4, r16
 7bc:	22 e0       	ldi	r18, 0x02	; 2
 7be:	42 0e       	add	r4, r18
 7c0:	51 1c       	adc	r5, r1
 7c2:	f8 01       	movw	r30, r16
 7c4:	a0 80       	ld	r10, Z
 7c6:	b1 80       	ldd	r11, Z+1	; 0x01
 7c8:	36 fe       	sbrs	r3, 6
 7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <vfprintf+0x198>
 7cc:	69 2d       	mov	r22, r9
 7ce:	70 e0       	ldi	r23, 0x00	; 0
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <vfprintf+0x19c>
 7d2:	6f ef       	ldi	r22, 0xFF	; 255
 7d4:	7f ef       	ldi	r23, 0xFF	; 255
 7d6:	c5 01       	movw	r24, r10
 7d8:	2d d1       	rcall	.+602    	; 0xa34 <strnlen_P>
 7da:	4c 01       	movw	r8, r24
 7dc:	f3 2d       	mov	r31, r3
 7de:	f0 68       	ori	r31, 0x80	; 128
 7e0:	3f 2e       	mov	r3, r31
 7e2:	82 01       	movw	r16, r4
 7e4:	33 fc       	sbrc	r3, 3
 7e6:	19 c0       	rjmp	.+50     	; 0x81a <vfprintf+0x1e0>
 7e8:	82 2d       	mov	r24, r2
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	88 16       	cp	r8, r24
 7ee:	99 06       	cpc	r9, r25
 7f0:	a0 f4       	brcc	.+40     	; 0x81a <vfprintf+0x1e0>
 7f2:	b6 01       	movw	r22, r12
 7f4:	80 e2       	ldi	r24, 0x20	; 32
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	33 d1       	rcall	.+614    	; 0xa60 <fputc>
 7fa:	2a 94       	dec	r2
 7fc:	f5 cf       	rjmp	.-22     	; 0x7e8 <vfprintf+0x1ae>
 7fe:	f5 01       	movw	r30, r10
 800:	37 fc       	sbrc	r3, 7
 802:	85 91       	lpm	r24, Z+
 804:	37 fe       	sbrs	r3, 7
 806:	81 91       	ld	r24, Z+
 808:	5f 01       	movw	r10, r30
 80a:	b6 01       	movw	r22, r12
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	28 d1       	rcall	.+592    	; 0xa60 <fputc>
 810:	21 10       	cpse	r2, r1
 812:	2a 94       	dec	r2
 814:	21 e0       	ldi	r18, 0x01	; 1
 816:	82 1a       	sub	r8, r18
 818:	91 08       	sbc	r9, r1
 81a:	81 14       	cp	r8, r1
 81c:	91 04       	cpc	r9, r1
 81e:	79 f7       	brne	.-34     	; 0x7fe <vfprintf+0x1c4>
 820:	e1 c0       	rjmp	.+450    	; 0x9e4 <vfprintf+0x3aa>
 822:	84 36       	cpi	r24, 0x64	; 100
 824:	11 f0       	breq	.+4      	; 0x82a <vfprintf+0x1f0>
 826:	89 36       	cpi	r24, 0x69	; 105
 828:	39 f5       	brne	.+78     	; 0x878 <vfprintf+0x23e>
 82a:	f8 01       	movw	r30, r16
 82c:	37 fe       	sbrs	r3, 7
 82e:	07 c0       	rjmp	.+14     	; 0x83e <vfprintf+0x204>
 830:	60 81       	ld	r22, Z
 832:	71 81       	ldd	r23, Z+1	; 0x01
 834:	82 81       	ldd	r24, Z+2	; 0x02
 836:	93 81       	ldd	r25, Z+3	; 0x03
 838:	0c 5f       	subi	r16, 0xFC	; 252
 83a:	1f 4f       	sbci	r17, 0xFF	; 255
 83c:	08 c0       	rjmp	.+16     	; 0x84e <vfprintf+0x214>
 83e:	60 81       	ld	r22, Z
 840:	71 81       	ldd	r23, Z+1	; 0x01
 842:	07 2e       	mov	r0, r23
 844:	00 0c       	add	r0, r0
 846:	88 0b       	sbc	r24, r24
 848:	99 0b       	sbc	r25, r25
 84a:	0e 5f       	subi	r16, 0xFE	; 254
 84c:	1f 4f       	sbci	r17, 0xFF	; 255
 84e:	f3 2d       	mov	r31, r3
 850:	ff 76       	andi	r31, 0x6F	; 111
 852:	3f 2e       	mov	r3, r31
 854:	97 ff       	sbrs	r25, 7
 856:	09 c0       	rjmp	.+18     	; 0x86a <vfprintf+0x230>
 858:	90 95       	com	r25
 85a:	80 95       	com	r24
 85c:	70 95       	com	r23
 85e:	61 95       	neg	r22
 860:	7f 4f       	sbci	r23, 0xFF	; 255
 862:	8f 4f       	sbci	r24, 0xFF	; 255
 864:	9f 4f       	sbci	r25, 0xFF	; 255
 866:	f0 68       	ori	r31, 0x80	; 128
 868:	3f 2e       	mov	r3, r31
 86a:	2a e0       	ldi	r18, 0x0A	; 10
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	a3 01       	movw	r20, r6
 870:	33 d1       	rcall	.+614    	; 0xad8 <__ultoa_invert>
 872:	88 2e       	mov	r8, r24
 874:	86 18       	sub	r8, r6
 876:	44 c0       	rjmp	.+136    	; 0x900 <vfprintf+0x2c6>
 878:	85 37       	cpi	r24, 0x75	; 117
 87a:	31 f4       	brne	.+12     	; 0x888 <vfprintf+0x24e>
 87c:	23 2d       	mov	r18, r3
 87e:	2f 7e       	andi	r18, 0xEF	; 239
 880:	b2 2e       	mov	r11, r18
 882:	2a e0       	ldi	r18, 0x0A	; 10
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	25 c0       	rjmp	.+74     	; 0x8d2 <vfprintf+0x298>
 888:	93 2d       	mov	r25, r3
 88a:	99 7f       	andi	r25, 0xF9	; 249
 88c:	b9 2e       	mov	r11, r25
 88e:	8f 36       	cpi	r24, 0x6F	; 111
 890:	c1 f0       	breq	.+48     	; 0x8c2 <vfprintf+0x288>
 892:	18 f4       	brcc	.+6      	; 0x89a <vfprintf+0x260>
 894:	88 35       	cpi	r24, 0x58	; 88
 896:	79 f0       	breq	.+30     	; 0x8b6 <vfprintf+0x27c>
 898:	ae c0       	rjmp	.+348    	; 0x9f6 <vfprintf+0x3bc>
 89a:	80 37       	cpi	r24, 0x70	; 112
 89c:	19 f0       	breq	.+6      	; 0x8a4 <vfprintf+0x26a>
 89e:	88 37       	cpi	r24, 0x78	; 120
 8a0:	21 f0       	breq	.+8      	; 0x8aa <vfprintf+0x270>
 8a2:	a9 c0       	rjmp	.+338    	; 0x9f6 <vfprintf+0x3bc>
 8a4:	e9 2f       	mov	r30, r25
 8a6:	e0 61       	ori	r30, 0x10	; 16
 8a8:	be 2e       	mov	r11, r30
 8aa:	b4 fe       	sbrs	r11, 4
 8ac:	0d c0       	rjmp	.+26     	; 0x8c8 <vfprintf+0x28e>
 8ae:	fb 2d       	mov	r31, r11
 8b0:	f4 60       	ori	r31, 0x04	; 4
 8b2:	bf 2e       	mov	r11, r31
 8b4:	09 c0       	rjmp	.+18     	; 0x8c8 <vfprintf+0x28e>
 8b6:	34 fe       	sbrs	r3, 4
 8b8:	0a c0       	rjmp	.+20     	; 0x8ce <vfprintf+0x294>
 8ba:	29 2f       	mov	r18, r25
 8bc:	26 60       	ori	r18, 0x06	; 6
 8be:	b2 2e       	mov	r11, r18
 8c0:	06 c0       	rjmp	.+12     	; 0x8ce <vfprintf+0x294>
 8c2:	28 e0       	ldi	r18, 0x08	; 8
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <vfprintf+0x298>
 8c8:	20 e1       	ldi	r18, 0x10	; 16
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <vfprintf+0x298>
 8ce:	20 e1       	ldi	r18, 0x10	; 16
 8d0:	32 e0       	ldi	r19, 0x02	; 2
 8d2:	f8 01       	movw	r30, r16
 8d4:	b7 fe       	sbrs	r11, 7
 8d6:	07 c0       	rjmp	.+14     	; 0x8e6 <vfprintf+0x2ac>
 8d8:	60 81       	ld	r22, Z
 8da:	71 81       	ldd	r23, Z+1	; 0x01
 8dc:	82 81       	ldd	r24, Z+2	; 0x02
 8de:	93 81       	ldd	r25, Z+3	; 0x03
 8e0:	0c 5f       	subi	r16, 0xFC	; 252
 8e2:	1f 4f       	sbci	r17, 0xFF	; 255
 8e4:	06 c0       	rjmp	.+12     	; 0x8f2 <vfprintf+0x2b8>
 8e6:	60 81       	ld	r22, Z
 8e8:	71 81       	ldd	r23, Z+1	; 0x01
 8ea:	80 e0       	ldi	r24, 0x00	; 0
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	0e 5f       	subi	r16, 0xFE	; 254
 8f0:	1f 4f       	sbci	r17, 0xFF	; 255
 8f2:	a3 01       	movw	r20, r6
 8f4:	f1 d0       	rcall	.+482    	; 0xad8 <__ultoa_invert>
 8f6:	88 2e       	mov	r8, r24
 8f8:	86 18       	sub	r8, r6
 8fa:	fb 2d       	mov	r31, r11
 8fc:	ff 77       	andi	r31, 0x7F	; 127
 8fe:	3f 2e       	mov	r3, r31
 900:	36 fe       	sbrs	r3, 6
 902:	0d c0       	rjmp	.+26     	; 0x91e <vfprintf+0x2e4>
 904:	23 2d       	mov	r18, r3
 906:	2e 7f       	andi	r18, 0xFE	; 254
 908:	a2 2e       	mov	r10, r18
 90a:	89 14       	cp	r8, r9
 90c:	58 f4       	brcc	.+22     	; 0x924 <vfprintf+0x2ea>
 90e:	34 fe       	sbrs	r3, 4
 910:	0b c0       	rjmp	.+22     	; 0x928 <vfprintf+0x2ee>
 912:	32 fc       	sbrc	r3, 2
 914:	09 c0       	rjmp	.+18     	; 0x928 <vfprintf+0x2ee>
 916:	83 2d       	mov	r24, r3
 918:	8e 7e       	andi	r24, 0xEE	; 238
 91a:	a8 2e       	mov	r10, r24
 91c:	05 c0       	rjmp	.+10     	; 0x928 <vfprintf+0x2ee>
 91e:	b8 2c       	mov	r11, r8
 920:	a3 2c       	mov	r10, r3
 922:	03 c0       	rjmp	.+6      	; 0x92a <vfprintf+0x2f0>
 924:	b8 2c       	mov	r11, r8
 926:	01 c0       	rjmp	.+2      	; 0x92a <vfprintf+0x2f0>
 928:	b9 2c       	mov	r11, r9
 92a:	a4 fe       	sbrs	r10, 4
 92c:	0f c0       	rjmp	.+30     	; 0x94c <vfprintf+0x312>
 92e:	fe 01       	movw	r30, r28
 930:	e8 0d       	add	r30, r8
 932:	f1 1d       	adc	r31, r1
 934:	80 81       	ld	r24, Z
 936:	80 33       	cpi	r24, 0x30	; 48
 938:	21 f4       	brne	.+8      	; 0x942 <vfprintf+0x308>
 93a:	9a 2d       	mov	r25, r10
 93c:	99 7e       	andi	r25, 0xE9	; 233
 93e:	a9 2e       	mov	r10, r25
 940:	09 c0       	rjmp	.+18     	; 0x954 <vfprintf+0x31a>
 942:	a2 fe       	sbrs	r10, 2
 944:	06 c0       	rjmp	.+12     	; 0x952 <vfprintf+0x318>
 946:	b3 94       	inc	r11
 948:	b3 94       	inc	r11
 94a:	04 c0       	rjmp	.+8      	; 0x954 <vfprintf+0x31a>
 94c:	8a 2d       	mov	r24, r10
 94e:	86 78       	andi	r24, 0x86	; 134
 950:	09 f0       	breq	.+2      	; 0x954 <vfprintf+0x31a>
 952:	b3 94       	inc	r11
 954:	a3 fc       	sbrc	r10, 3
 956:	10 c0       	rjmp	.+32     	; 0x978 <vfprintf+0x33e>
 958:	a0 fe       	sbrs	r10, 0
 95a:	06 c0       	rjmp	.+12     	; 0x968 <vfprintf+0x32e>
 95c:	b2 14       	cp	r11, r2
 95e:	80 f4       	brcc	.+32     	; 0x980 <vfprintf+0x346>
 960:	28 0c       	add	r2, r8
 962:	92 2c       	mov	r9, r2
 964:	9b 18       	sub	r9, r11
 966:	0d c0       	rjmp	.+26     	; 0x982 <vfprintf+0x348>
 968:	b2 14       	cp	r11, r2
 96a:	58 f4       	brcc	.+22     	; 0x982 <vfprintf+0x348>
 96c:	b6 01       	movw	r22, r12
 96e:	80 e2       	ldi	r24, 0x20	; 32
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	76 d0       	rcall	.+236    	; 0xa60 <fputc>
 974:	b3 94       	inc	r11
 976:	f8 cf       	rjmp	.-16     	; 0x968 <vfprintf+0x32e>
 978:	b2 14       	cp	r11, r2
 97a:	18 f4       	brcc	.+6      	; 0x982 <vfprintf+0x348>
 97c:	2b 18       	sub	r2, r11
 97e:	02 c0       	rjmp	.+4      	; 0x984 <vfprintf+0x34a>
 980:	98 2c       	mov	r9, r8
 982:	21 2c       	mov	r2, r1
 984:	a4 fe       	sbrs	r10, 4
 986:	0f c0       	rjmp	.+30     	; 0x9a6 <vfprintf+0x36c>
 988:	b6 01       	movw	r22, r12
 98a:	80 e3       	ldi	r24, 0x30	; 48
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	68 d0       	rcall	.+208    	; 0xa60 <fputc>
 990:	a2 fe       	sbrs	r10, 2
 992:	16 c0       	rjmp	.+44     	; 0x9c0 <vfprintf+0x386>
 994:	a1 fc       	sbrc	r10, 1
 996:	03 c0       	rjmp	.+6      	; 0x99e <vfprintf+0x364>
 998:	88 e7       	ldi	r24, 0x78	; 120
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <vfprintf+0x368>
 99e:	88 e5       	ldi	r24, 0x58	; 88
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	b6 01       	movw	r22, r12
 9a4:	0c c0       	rjmp	.+24     	; 0x9be <vfprintf+0x384>
 9a6:	8a 2d       	mov	r24, r10
 9a8:	86 78       	andi	r24, 0x86	; 134
 9aa:	51 f0       	breq	.+20     	; 0x9c0 <vfprintf+0x386>
 9ac:	a1 fe       	sbrs	r10, 1
 9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <vfprintf+0x37a>
 9b0:	8b e2       	ldi	r24, 0x2B	; 43
 9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <vfprintf+0x37c>
 9b4:	80 e2       	ldi	r24, 0x20	; 32
 9b6:	a7 fc       	sbrc	r10, 7
 9b8:	8d e2       	ldi	r24, 0x2D	; 45
 9ba:	b6 01       	movw	r22, r12
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	50 d0       	rcall	.+160    	; 0xa60 <fputc>
 9c0:	89 14       	cp	r8, r9
 9c2:	30 f4       	brcc	.+12     	; 0x9d0 <vfprintf+0x396>
 9c4:	b6 01       	movw	r22, r12
 9c6:	80 e3       	ldi	r24, 0x30	; 48
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	4a d0       	rcall	.+148    	; 0xa60 <fputc>
 9cc:	9a 94       	dec	r9
 9ce:	f8 cf       	rjmp	.-16     	; 0x9c0 <vfprintf+0x386>
 9d0:	8a 94       	dec	r8
 9d2:	f3 01       	movw	r30, r6
 9d4:	e8 0d       	add	r30, r8
 9d6:	f1 1d       	adc	r31, r1
 9d8:	80 81       	ld	r24, Z
 9da:	b6 01       	movw	r22, r12
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	40 d0       	rcall	.+128    	; 0xa60 <fputc>
 9e0:	81 10       	cpse	r8, r1
 9e2:	f6 cf       	rjmp	.-20     	; 0x9d0 <vfprintf+0x396>
 9e4:	22 20       	and	r2, r2
 9e6:	09 f4       	brne	.+2      	; 0x9ea <vfprintf+0x3b0>
 9e8:	4e ce       	rjmp	.-868    	; 0x686 <vfprintf+0x4c>
 9ea:	b6 01       	movw	r22, r12
 9ec:	80 e2       	ldi	r24, 0x20	; 32
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	37 d0       	rcall	.+110    	; 0xa60 <fputc>
 9f2:	2a 94       	dec	r2
 9f4:	f7 cf       	rjmp	.-18     	; 0x9e4 <vfprintf+0x3aa>
 9f6:	f6 01       	movw	r30, r12
 9f8:	86 81       	ldd	r24, Z+6	; 0x06
 9fa:	97 81       	ldd	r25, Z+7	; 0x07
 9fc:	02 c0       	rjmp	.+4      	; 0xa02 <vfprintf+0x3c8>
 9fe:	8f ef       	ldi	r24, 0xFF	; 255
 a00:	9f ef       	ldi	r25, 0xFF	; 255
 a02:	2b 96       	adiw	r28, 0x0b	; 11
 a04:	0f b6       	in	r0, 0x3f	; 63
 a06:	f8 94       	cli
 a08:	de bf       	out	0x3e, r29	; 62
 a0a:	0f be       	out	0x3f, r0	; 63
 a0c:	cd bf       	out	0x3d, r28	; 61
 a0e:	df 91       	pop	r29
 a10:	cf 91       	pop	r28
 a12:	1f 91       	pop	r17
 a14:	0f 91       	pop	r16
 a16:	ff 90       	pop	r15
 a18:	ef 90       	pop	r14
 a1a:	df 90       	pop	r13
 a1c:	cf 90       	pop	r12
 a1e:	bf 90       	pop	r11
 a20:	af 90       	pop	r10
 a22:	9f 90       	pop	r9
 a24:	8f 90       	pop	r8
 a26:	7f 90       	pop	r7
 a28:	6f 90       	pop	r6
 a2a:	5f 90       	pop	r5
 a2c:	4f 90       	pop	r4
 a2e:	3f 90       	pop	r3
 a30:	2f 90       	pop	r2
 a32:	08 95       	ret

00000a34 <strnlen_P>:
 a34:	fc 01       	movw	r30, r24
 a36:	05 90       	lpm	r0, Z+
 a38:	61 50       	subi	r22, 0x01	; 1
 a3a:	70 40       	sbci	r23, 0x00	; 0
 a3c:	01 10       	cpse	r0, r1
 a3e:	d8 f7       	brcc	.-10     	; 0xa36 <strnlen_P+0x2>
 a40:	80 95       	com	r24
 a42:	90 95       	com	r25
 a44:	8e 0f       	add	r24, r30
 a46:	9f 1f       	adc	r25, r31
 a48:	08 95       	ret

00000a4a <strnlen>:
 a4a:	fc 01       	movw	r30, r24
 a4c:	61 50       	subi	r22, 0x01	; 1
 a4e:	70 40       	sbci	r23, 0x00	; 0
 a50:	01 90       	ld	r0, Z+
 a52:	01 10       	cpse	r0, r1
 a54:	d8 f7       	brcc	.-10     	; 0xa4c <strnlen+0x2>
 a56:	80 95       	com	r24
 a58:	90 95       	com	r25
 a5a:	8e 0f       	add	r24, r30
 a5c:	9f 1f       	adc	r25, r31
 a5e:	08 95       	ret

00000a60 <fputc>:
 a60:	0f 93       	push	r16
 a62:	1f 93       	push	r17
 a64:	cf 93       	push	r28
 a66:	df 93       	push	r29
 a68:	fb 01       	movw	r30, r22
 a6a:	23 81       	ldd	r18, Z+3	; 0x03
 a6c:	21 fd       	sbrc	r18, 1
 a6e:	03 c0       	rjmp	.+6      	; 0xa76 <fputc+0x16>
 a70:	8f ef       	ldi	r24, 0xFF	; 255
 a72:	9f ef       	ldi	r25, 0xFF	; 255
 a74:	2c c0       	rjmp	.+88     	; 0xace <fputc+0x6e>
 a76:	22 ff       	sbrs	r18, 2
 a78:	16 c0       	rjmp	.+44     	; 0xaa6 <fputc+0x46>
 a7a:	46 81       	ldd	r20, Z+6	; 0x06
 a7c:	57 81       	ldd	r21, Z+7	; 0x07
 a7e:	24 81       	ldd	r18, Z+4	; 0x04
 a80:	35 81       	ldd	r19, Z+5	; 0x05
 a82:	42 17       	cp	r20, r18
 a84:	53 07       	cpc	r21, r19
 a86:	44 f4       	brge	.+16     	; 0xa98 <fputc+0x38>
 a88:	a0 81       	ld	r26, Z
 a8a:	b1 81       	ldd	r27, Z+1	; 0x01
 a8c:	9d 01       	movw	r18, r26
 a8e:	2f 5f       	subi	r18, 0xFF	; 255
 a90:	3f 4f       	sbci	r19, 0xFF	; 255
 a92:	31 83       	std	Z+1, r19	; 0x01
 a94:	20 83       	st	Z, r18
 a96:	8c 93       	st	X, r24
 a98:	26 81       	ldd	r18, Z+6	; 0x06
 a9a:	37 81       	ldd	r19, Z+7	; 0x07
 a9c:	2f 5f       	subi	r18, 0xFF	; 255
 a9e:	3f 4f       	sbci	r19, 0xFF	; 255
 aa0:	37 83       	std	Z+7, r19	; 0x07
 aa2:	26 83       	std	Z+6, r18	; 0x06
 aa4:	14 c0       	rjmp	.+40     	; 0xace <fputc+0x6e>
 aa6:	8b 01       	movw	r16, r22
 aa8:	ec 01       	movw	r28, r24
 aaa:	fb 01       	movw	r30, r22
 aac:	00 84       	ldd	r0, Z+8	; 0x08
 aae:	f1 85       	ldd	r31, Z+9	; 0x09
 ab0:	e0 2d       	mov	r30, r0
 ab2:	09 95       	icall
 ab4:	89 2b       	or	r24, r25
 ab6:	e1 f6       	brne	.-72     	; 0xa70 <fputc+0x10>
 ab8:	d8 01       	movw	r26, r16
 aba:	16 96       	adiw	r26, 0x06	; 6
 abc:	8d 91       	ld	r24, X+
 abe:	9c 91       	ld	r25, X
 ac0:	17 97       	sbiw	r26, 0x07	; 7
 ac2:	01 96       	adiw	r24, 0x01	; 1
 ac4:	17 96       	adiw	r26, 0x07	; 7
 ac6:	9c 93       	st	X, r25
 ac8:	8e 93       	st	-X, r24
 aca:	16 97       	sbiw	r26, 0x06	; 6
 acc:	ce 01       	movw	r24, r28
 ace:	df 91       	pop	r29
 ad0:	cf 91       	pop	r28
 ad2:	1f 91       	pop	r17
 ad4:	0f 91       	pop	r16
 ad6:	08 95       	ret

00000ad8 <__ultoa_invert>:
 ad8:	fa 01       	movw	r30, r20
 ada:	aa 27       	eor	r26, r26
 adc:	28 30       	cpi	r18, 0x08	; 8
 ade:	51 f1       	breq	.+84     	; 0xb34 <__ultoa_invert+0x5c>
 ae0:	20 31       	cpi	r18, 0x10	; 16
 ae2:	81 f1       	breq	.+96     	; 0xb44 <__ultoa_invert+0x6c>
 ae4:	e8 94       	clt
 ae6:	6f 93       	push	r22
 ae8:	6e 7f       	andi	r22, 0xFE	; 254
 aea:	6e 5f       	subi	r22, 0xFE	; 254
 aec:	7f 4f       	sbci	r23, 0xFF	; 255
 aee:	8f 4f       	sbci	r24, 0xFF	; 255
 af0:	9f 4f       	sbci	r25, 0xFF	; 255
 af2:	af 4f       	sbci	r26, 0xFF	; 255
 af4:	b1 e0       	ldi	r27, 0x01	; 1
 af6:	3e d0       	rcall	.+124    	; 0xb74 <__ultoa_invert+0x9c>
 af8:	b4 e0       	ldi	r27, 0x04	; 4
 afa:	3c d0       	rcall	.+120    	; 0xb74 <__ultoa_invert+0x9c>
 afc:	67 0f       	add	r22, r23
 afe:	78 1f       	adc	r23, r24
 b00:	89 1f       	adc	r24, r25
 b02:	9a 1f       	adc	r25, r26
 b04:	a1 1d       	adc	r26, r1
 b06:	68 0f       	add	r22, r24
 b08:	79 1f       	adc	r23, r25
 b0a:	8a 1f       	adc	r24, r26
 b0c:	91 1d       	adc	r25, r1
 b0e:	a1 1d       	adc	r26, r1
 b10:	6a 0f       	add	r22, r26
 b12:	71 1d       	adc	r23, r1
 b14:	81 1d       	adc	r24, r1
 b16:	91 1d       	adc	r25, r1
 b18:	a1 1d       	adc	r26, r1
 b1a:	20 d0       	rcall	.+64     	; 0xb5c <__ultoa_invert+0x84>
 b1c:	09 f4       	brne	.+2      	; 0xb20 <__ultoa_invert+0x48>
 b1e:	68 94       	set
 b20:	3f 91       	pop	r19
 b22:	2a e0       	ldi	r18, 0x0A	; 10
 b24:	26 9f       	mul	r18, r22
 b26:	11 24       	eor	r1, r1
 b28:	30 19       	sub	r19, r0
 b2a:	30 5d       	subi	r19, 0xD0	; 208
 b2c:	31 93       	st	Z+, r19
 b2e:	de f6       	brtc	.-74     	; 0xae6 <__ultoa_invert+0xe>
 b30:	cf 01       	movw	r24, r30
 b32:	08 95       	ret
 b34:	46 2f       	mov	r20, r22
 b36:	47 70       	andi	r20, 0x07	; 7
 b38:	40 5d       	subi	r20, 0xD0	; 208
 b3a:	41 93       	st	Z+, r20
 b3c:	b3 e0       	ldi	r27, 0x03	; 3
 b3e:	0f d0       	rcall	.+30     	; 0xb5e <__ultoa_invert+0x86>
 b40:	c9 f7       	brne	.-14     	; 0xb34 <__ultoa_invert+0x5c>
 b42:	f6 cf       	rjmp	.-20     	; 0xb30 <__ultoa_invert+0x58>
 b44:	46 2f       	mov	r20, r22
 b46:	4f 70       	andi	r20, 0x0F	; 15
 b48:	40 5d       	subi	r20, 0xD0	; 208
 b4a:	4a 33       	cpi	r20, 0x3A	; 58
 b4c:	18 f0       	brcs	.+6      	; 0xb54 <__ultoa_invert+0x7c>
 b4e:	49 5d       	subi	r20, 0xD9	; 217
 b50:	31 fd       	sbrc	r19, 1
 b52:	40 52       	subi	r20, 0x20	; 32
 b54:	41 93       	st	Z+, r20
 b56:	02 d0       	rcall	.+4      	; 0xb5c <__ultoa_invert+0x84>
 b58:	a9 f7       	brne	.-22     	; 0xb44 <__ultoa_invert+0x6c>
 b5a:	ea cf       	rjmp	.-44     	; 0xb30 <__ultoa_invert+0x58>
 b5c:	b4 e0       	ldi	r27, 0x04	; 4
 b5e:	a6 95       	lsr	r26
 b60:	97 95       	ror	r25
 b62:	87 95       	ror	r24
 b64:	77 95       	ror	r23
 b66:	67 95       	ror	r22
 b68:	ba 95       	dec	r27
 b6a:	c9 f7       	brne	.-14     	; 0xb5e <__ultoa_invert+0x86>
 b6c:	00 97       	sbiw	r24, 0x00	; 0
 b6e:	61 05       	cpc	r22, r1
 b70:	71 05       	cpc	r23, r1
 b72:	08 95       	ret
 b74:	9b 01       	movw	r18, r22
 b76:	ac 01       	movw	r20, r24
 b78:	0a 2e       	mov	r0, r26
 b7a:	06 94       	lsr	r0
 b7c:	57 95       	ror	r21
 b7e:	47 95       	ror	r20
 b80:	37 95       	ror	r19
 b82:	27 95       	ror	r18
 b84:	ba 95       	dec	r27
 b86:	c9 f7       	brne	.-14     	; 0xb7a <__ultoa_invert+0xa2>
 b88:	62 0f       	add	r22, r18
 b8a:	73 1f       	adc	r23, r19
 b8c:	84 1f       	adc	r24, r20
 b8e:	95 1f       	adc	r25, r21
 b90:	a0 1d       	adc	r26, r0
 b92:	08 95       	ret

00000b94 <eeprom_read_byte>:
 b94:	e1 99       	sbic	0x1c, 1	; 28
 b96:	fe cf       	rjmp	.-4      	; 0xb94 <eeprom_read_byte>
 b98:	9f bb       	out	0x1f, r25	; 31
 b9a:	8e bb       	out	0x1e, r24	; 30
 b9c:	e0 9a       	sbi	0x1c, 0	; 28
 b9e:	99 27       	eor	r25, r25
 ba0:	8d b3       	in	r24, 0x1d	; 29
 ba2:	08 95       	ret

00000ba4 <eeprom_update_byte>:
 ba4:	26 2f       	mov	r18, r22

00000ba6 <eeprom_update_r18>:
 ba6:	e1 99       	sbic	0x1c, 1	; 28
 ba8:	fe cf       	rjmp	.-4      	; 0xba6 <eeprom_update_r18>
 baa:	9f bb       	out	0x1f, r25	; 31
 bac:	8e bb       	out	0x1e, r24	; 30
 bae:	e0 9a       	sbi	0x1c, 0	; 28
 bb0:	01 97       	sbiw	r24, 0x01	; 1
 bb2:	0d b2       	in	r0, 0x1d	; 29
 bb4:	02 16       	cp	r0, r18
 bb6:	31 f0       	breq	.+12     	; 0xbc4 <eeprom_update_r18+0x1e>
 bb8:	2d bb       	out	0x1d, r18	; 29
 bba:	0f b6       	in	r0, 0x3f	; 63
 bbc:	f8 94       	cli
 bbe:	e2 9a       	sbi	0x1c, 2	; 28
 bc0:	e1 9a       	sbi	0x1c, 1	; 28
 bc2:	0f be       	out	0x3f, r0	; 63
 bc4:	08 95       	ret

00000bc6 <_exit>:
 bc6:	f8 94       	cli

00000bc8 <__stop_program>:
 bc8:	ff cf       	rjmp	.-2      	; 0xbc8 <__stop_program>
