
OpdrachtB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bc0  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b4  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000436  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004bc  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  00002158  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	5b d0       	rcall	.+182    	; 0x150 <main>
  9a:	a0 c0       	rjmp	.+320    	; 0x1dc <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
}

// Zet het display uit
void displayOff() 
{
    spi_writeWord(0x0C, 0x00);
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	08 c0       	rjmp	.+16     	; 0xb4 <wait+0x16>
  a4:	ef ec       	ldi	r30, 0xCF	; 207
  a6:	f7 e0       	ldi	r31, 0x07	; 7
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <wait+0xa>
  ac:	00 c0       	rjmp	.+0      	; 0xae <wait+0x10>
  ae:	00 00       	nop
  b0:	2f 5f       	subi	r18, 0xFF	; 255
  b2:	3f 4f       	sbci	r19, 0xFF	; 255
  b4:	28 17       	cp	r18, r24
  b6:	39 07       	cpc	r19, r25
  b8:	ac f3       	brlt	.-22     	; 0xa4 <wait+0x6>
  ba:	08 95       	ret

000000bc <spi_masterInit>:
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 bb       	out	0x17, r24	; 23
  c0:	87 b3       	in	r24, 0x17	; 23
  c2:	87 7f       	andi	r24, 0xF7	; 247
  c4:	87 bb       	out	0x17, r24	; 23
  c6:	88 b3       	in	r24, 0x18	; 24
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	88 bb       	out	0x18, r24	; 24
  cc:	82 e5       	ldi	r24, 0x52	; 82
  ce:	8d b9       	out	0x0d, r24	; 13
  d0:	08 95       	ret

000000d2 <spi_write>:
  d2:	8f b9       	out	0x0f, r24	; 15
  d4:	77 9b       	sbis	0x0e, 7	; 14
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <spi_write+0x2>
  d8:	08 95       	ret

000000da <spi_slaveSelect>:
  da:	88 b3       	in	r24, 0x18	; 24
  dc:	8e 7f       	andi	r24, 0xFE	; 254
  de:	88 bb       	out	0x18, r24	; 24
  e0:	08 95       	ret

000000e2 <spi_slaveDeSelect>:
  e2:	88 b3       	in	r24, 0x18	; 24
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	88 bb       	out	0x18, r24	; 24
  e8:	08 95       	ret

000000ea <spi_writeWord>:
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	d8 2f       	mov	r29, r24
  f0:	c6 2f       	mov	r28, r22
  f2:	f3 df       	rcall	.-26     	; 0xda <spi_slaveSelect>
  f4:	8d 2f       	mov	r24, r29
  f6:	ed df       	rcall	.-38     	; 0xd2 <spi_write>
  f8:	8c 2f       	mov	r24, r28
  fa:	eb df       	rcall	.-42     	; 0xd2 <spi_write>
  fc:	f2 df       	rcall	.-28     	; 0xe2 <spi_slaveDeSelect>
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <displayDriverInit>:
 104:	6f ef       	ldi	r22, 0xFF	; 255
 106:	89 e0       	ldi	r24, 0x09	; 9
 108:	f0 df       	rcall	.-32     	; 0xea <spi_writeWord>
 10a:	6f e0       	ldi	r22, 0x0F	; 15
 10c:	8a e0       	ldi	r24, 0x0A	; 10
 10e:	ed df       	rcall	.-38     	; 0xea <spi_writeWord>
 110:	63 e0       	ldi	r22, 0x03	; 3
 112:	8b e0       	ldi	r24, 0x0B	; 11
 114:	ea df       	rcall	.-44     	; 0xea <spi_writeWord>
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	8c e0       	ldi	r24, 0x0C	; 12
 11a:	e7 cf       	rjmp	.-50     	; 0xea <spi_writeWord>
 11c:	08 95       	ret

0000011e <writeLedDisplay>:
}

// Toon een getal op het 4-digit LED-display
void writeLedDisplay(int value) 
{
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	8c 01       	movw	r16, r24
    if (value < 0 || value > 9999) return; // Beperk de waarde tot 4 cijfers
 126:	00 31       	cpi	r16, 0x10	; 16
 128:	87 e2       	ldi	r24, 0x27	; 39
 12a:	18 07       	cpc	r17, r24
 12c:	68 f4       	brcc	.+26     	; 0x148 <writeLedDisplay+0x2a>
 12e:	c1 e0       	ldi	r28, 0x01	; 1
 130:	09 c0       	rjmp	.+18     	; 0x144 <writeLedDisplay+0x26>
    
    for (char i = 1; i <= 4; i++) 
    {
        char digit = value % 10;   // Haal het laatste cijfer
        value /= 10;               // Verwijder het laatste cijfer uit de waarde
 132:	c8 01       	movw	r24, r16
 134:	6a e0       	ldi	r22, 0x0A	; 10
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	2a d0       	rcall	.+84     	; 0x18e <__divmodhi4>
 13a:	8b 01       	movw	r16, r22
        spi_writeWord(i, digit);   // Schrijf het cijfer naar het juiste display-segment
 13c:	68 2f       	mov	r22, r24
 13e:	8c 2f       	mov	r24, r28
 140:	d4 df       	rcall	.-88     	; 0xea <spi_writeWord>
// Toon een getal op het 4-digit LED-display
void writeLedDisplay(int value) 
{
    if (value < 0 || value > 9999) return; // Beperk de waarde tot 4 cijfers
    
    for (char i = 1; i <= 4; i++) 
 142:	cf 5f       	subi	r28, 0xFF	; 255
 144:	c5 30       	cpi	r28, 0x05	; 5
 146:	a8 f3       	brcs	.-22     	; 0x132 <writeLedDisplay+0x14>
    {
        char digit = value % 10;   // Haal het laatste cijfer
        value /= 10;               // Verwijder het laatste cijfer uit de waarde
        spi_writeWord(i, digit);   // Schrijf het cijfer naar het juiste display-segment
    }
}
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	0f 91       	pop	r16
 14e:	08 95       	ret

00000150 <main>:

int main()
{
    // Initialisatie van SPI en display
    DDRB = 0x01;                     // Zet PB0 als output voor display select
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	87 bb       	out	0x17, r24	; 23
    spi_masterInit();                 // Initialiseer SPI
 154:	b3 df       	rcall	.-154    	; 0xbc <spi_masterInit>
    displayDriverInit();              // Initialiseer display driver
 156:	d6 df       	rcall	.-84     	; 0x104 <displayDriverInit>
 158:	82 ed       	ldi	r24, 0xD2	; 210

    // Test met verschillende getallen
    writeLedDisplay(1234);
 15a:	94 e0       	ldi	r25, 0x04	; 4
 15c:	e0 df       	rcall	.-64     	; 0x11e <writeLedDisplay>
 15e:	80 ed       	ldi	r24, 0xD0	; 208
    wait(2000);
 160:	97 e0       	ldi	r25, 0x07	; 7
 162:	9d df       	rcall	.-198    	; 0x9e <wait>
 164:	88 e3       	ldi	r24, 0x38	; 56
    
    writeLedDisplay(56);
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	da df       	rcall	.-76     	; 0x11e <writeLedDisplay>
 16a:	80 ed       	ldi	r24, 0xD0	; 208
    wait(2000);
 16c:	97 e0       	ldi	r25, 0x07	; 7
 16e:	97 df       	rcall	.-210    	; 0x9e <wait>
 170:	87 e0       	ldi	r24, 0x07	; 7
    
    writeLedDisplay(7);
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	d4 df       	rcall	.-88     	; 0x11e <writeLedDisplay>
 176:	80 ed       	ldi	r24, 0xD0	; 208
    wait(2000);
 178:	97 e0       	ldi	r25, 0x07	; 7
 17a:	91 df       	rcall	.-222    	; 0x9e <wait>
 17c:	8f e0       	ldi	r24, 0x0F	; 15
    
    writeLedDisplay(9999);
 17e:	97 e2       	ldi	r25, 0x27	; 39
 180:	ce df       	rcall	.-100    	; 0x11e <writeLedDisplay>
 182:	80 ed       	ldi	r24, 0xD0	; 208
 184:	97 e0       	ldi	r25, 0x07	; 7
    wait(2000);
 186:	8b df       	rcall	.-234    	; 0x9e <wait>
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	08 95       	ret

0000018e <__divmodhi4>:

    return 1;
}
 18e:	97 fb       	bst	r25, 7
 190:	07 2e       	mov	r0, r23
 192:	16 f4       	brtc	.+4      	; 0x198 <__divmodhi4+0xa>
 194:	00 94       	com	r0
 196:	06 d0       	rcall	.+12     	; 0x1a4 <__divmodhi4_neg1>
 198:	77 fd       	sbrc	r23, 7
 19a:	08 d0       	rcall	.+16     	; 0x1ac <__divmodhi4_neg2>
 19c:	0b d0       	rcall	.+22     	; 0x1b4 <__udivmodhi4>
 19e:	07 fc       	sbrc	r0, 7
 1a0:	05 d0       	rcall	.+10     	; 0x1ac <__divmodhi4_neg2>
 1a2:	3e f4       	brtc	.+14     	; 0x1b2 <__divmodhi4_exit>

000001a4 <__divmodhi4_neg1>:
 1a4:	90 95       	com	r25
 1a6:	81 95       	neg	r24
 1a8:	9f 4f       	sbci	r25, 0xFF	; 255
 1aa:	08 95       	ret

000001ac <__divmodhi4_neg2>:
 1ac:	70 95       	com	r23
 1ae:	61 95       	neg	r22
 1b0:	7f 4f       	sbci	r23, 0xFF	; 255

000001b2 <__divmodhi4_exit>:
 1b2:	08 95       	ret

000001b4 <__udivmodhi4>:
 1b4:	aa 1b       	sub	r26, r26
 1b6:	bb 1b       	sub	r27, r27
 1b8:	51 e1       	ldi	r21, 0x11	; 17
 1ba:	07 c0       	rjmp	.+14     	; 0x1ca <__udivmodhi4_ep>

000001bc <__udivmodhi4_loop>:
 1bc:	aa 1f       	adc	r26, r26
 1be:	bb 1f       	adc	r27, r27
 1c0:	a6 17       	cp	r26, r22
 1c2:	b7 07       	cpc	r27, r23
 1c4:	10 f0       	brcs	.+4      	; 0x1ca <__udivmodhi4_ep>
 1c6:	a6 1b       	sub	r26, r22
 1c8:	b7 0b       	sbc	r27, r23

000001ca <__udivmodhi4_ep>:
 1ca:	88 1f       	adc	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	5a 95       	dec	r21
 1d0:	a9 f7       	brne	.-22     	; 0x1bc <__udivmodhi4_loop>
 1d2:	80 95       	com	r24
 1d4:	90 95       	com	r25
 1d6:	bc 01       	movw	r22, r24
 1d8:	cd 01       	movw	r24, r26
 1da:	08 95       	ret

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
